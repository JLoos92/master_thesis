Here comes the partition the job runs in:
esd1
Here comes the Nodelist:/var/spool/torque/aux//270479}
Number of Nodes: 20}
#make --file MakefileJoh all
#elmerf90 src/FlotingShelves.f90 -o src/FlotingShelves
#elmerf90 src/MyFreeSurfaceSolver.f90 -o src/MyFreeSurfaceSolver
elmerf90 src/DistanceSolveRD.f90 -o src/DistanceSolveRD
/opt/bwhpc/common/compiler/intel/2017/compilers_and_libraries/linux/bin/intel64/ifort src/DistanceSolveRD.f90 -o src/DistanceSolveRD -DCONTIG=,CONTIGUOUS -DHAVE_EXECUTECOMMANDLINE -DUSE_ISO_C_BINDINGS -DUSE_ARPACK -O2 -g -fPIC -shared -nofor_main -I/home-link/epioi01/elmerice/Elmer_devel_04-17-18/share/elmersolver/include -L/home-link/epioi01/elmerice/Elmer_devel_04-17-18/lib/elmersolver -shared -lelmersolver 
echo Mismip3DInfluxRestart.sif > ELMERSOLVER_STARTINFO
gmsh Mesh.geo -1 -2
Info    : Running 'gmsh Mesh.geo -1 -2' [Gmsh 3.0.6, 1 node, max. 1 thread]
Info    : Started on Wed Jul  4 14:01:55 2018
Info    : Reading 'Mesh.geo'...
Info    : Done reading 'Mesh.geo'
Info    : Finalized high order topology of periodic connections
Info    : Meshing 1D...
Info    : Meshing curve 1 (Line)
Info    : Meshing curve 2 (Line)
Info    : Meshing curve 3 (Line)
Info    : Meshing curve 4 (Line)
Info    : Done meshing 1D (0.00011 s)
Info    : Meshing 2D...
Info    : Meshing surface 10 (transfinite)
Info    : Done meshing 2D (0 s)
Info    : 441 vertices 500 elements
Info    : Writing 'Mesh.msh'...
Info    : Done writing 'Mesh.msh'
Info    : Stopped on Wed Jul  4 14:01:55 2018
Info    : No current model available: creating one
ElmerGrid 14 2 Mesh.msh  -autoclean

Starting program Elmergrid
Elmergrid reading in-line arguments
Lower dimensional boundaries will be removed
Materials and boundaries will be renumbered
Nodes that do not appear in any element will be removed
Output will be saved to file Mesh.

Elmergrid loading data:
-----------------------
Format chosen using the first line: $MeshFormat
Loading mesh in Gmsh format 2.0 from file Mesh.msh
Allocating for 441 knots and 496 elements.
Moving bulk elements to boundary elements
Leading bulk elementtype is 404
Trailing bulk elementtype is 202
There are 112 (out of 496) lower dimensional elements.
Node 113 belongs to maximum of 4 elements
Found correctly 112 side elements.
Parent elements were reordered up to indx 384.
Moved 384 elements (out of 496) to new positions
Successfully read the mesh from the Gmsh input file.

Elmergrid creating and manipulating meshes:
-------------------------------------------
Removing lower dimensional boundaries
Maximum elementtype is 404 and dimension 2
Removed 0 (out of 112) less than 2D boundary elements
All 441 nodes were used by the mesh elements
Initial boundary interval [6,9]
boundary index changed 6 -> 1 in 8 elements
boundary index changed 7 -> 2 in 48 elements
boundary index changed 8 -> 3 in 8 elements
boundary index changed 9 -> 4 in 48 elements
Mapping boundary types from [6 9] to [1 4]
Initial body interval [11,11]
body index changed 11 -> 1 in 384 elements
Mapping material types from [11 11] to [1 1]

Elmergrid saving data with method 2:
-------------------------------------
Saving mesh in ElmerSolver format to directory Mesh.
Reusing an existing directory
Saving 441 coordinates to mesh.nodes.
Saving 384 element topologies to mesh.elements.
Saving boundary elements to mesh.boundary.
Saving header info to mesh.header.

Thank you for using Elmergrid!
Send bug reports and feature wishes to elmeradm@csc.fi
ElmerGrid 2 2 Mesh -partition 4 5 1

Starting program Elmergrid
Elmergrid reading in-line arguments
The mesh will be partitioned geometrically to 20 partitions.
Output will be saved to file Mesh.

Elmergrid loading data:
-----------------------
Loading mesh in ElmerSolver format from directory Mesh.
Loading header from mesh.header
Maximum elementtype index is: 404
Maximum number of nodes in element is: 4
Allocating for 441 knots and 384 elements.
Loading 441 Elmer nodes from mesh.nodes
Loading 384 bulk elements from mesh.elements
Loading 112 boundary elements from mesh.boundary
Elmer mesh loaded succesfully

Elmergrid creating and manipulating meshes:
-------------------------------------------
Dimension 3 not active but higher dimensions are?
Coordinates defined in 2 dimensions

Elmergrid partitioning meshes:
------------------------------
PartitionSimpleElements
connect: 0 0
Making a simple partitioning for 384 elements in 2-dimensions.
Ordering 1st direction with (1*x + 0.0001*y + 1e-08*z)
Ordering in the 2nd direction.
Creating an inverse topology of the finite element mesh
There are from 1 to 4 connections in the inverse topology.
Each node is in average in 3.483 elements
Number of nodal partitions: 20
Set the node partitions by the dominating element partition.
There are from 24 to 47 nodes in the 20 partitions.
Successfully made a partitioning with 19 to 20 elements.
Optimizing the partitioning at boundaries.
Ownership of 0 parents was changed at BCs
Optimizing for 20 partitions
Creating a table showing all parenting partitions of nodes.
Nodes belong to 4 partitions in maximum
There are 227 shared nodes which is 51.47 % of all nodes.
The initial owner was not any of the elements for 0 nodes
Checking partitioning before optimization
Checking for partitioning
Information on partition bandwidth
Average 19 elements with range 1 in partition
Average 22 nodes with range 9 in partition
Average 12 shared nodes with range 9 in partition
Average number of elements in partition 2.205e+01
Maximum deviation in ownership 9
Average deviation in ownership 3.324e+00
Average relative deviation 15.07 %
Checking for problematic sharings
Optimizing sharing for 20 partitions
Partitions 7 and 9 in element 205 (4 owners) oddly related 2 times
Partitions 12 and 14 in element 217 (4 owners) oddly related 2 times
Partitions 17 and 19 in element 229 (4 owners) oddly related 2 times
Changed the ownership of 52 nodes
Partitions 3 and 7 in element 205 (4 owners) oddly related 1 times
Partitions 8 and 12 in element 217 (4 owners) oddly related 1 times
Partitions 13 and 17 in element 229 (4 owners) oddly related 1 times
Changed the ownership of 3 nodes
Partitions 4 and 8 in element 156 (4 owners) oddly related 1 times
Partitions 9 and 13 in element 168 (4 owners) oddly related 1 times
Partitions 14 and 18 in element 180 (4 owners) oddly related 1 times
Partitions 3 and 7 in element 205 (4 owners) oddly related 1 times
Partitions 8 and 12 in element 217 (4 owners) oddly related 1 times
Partitions 13 and 17 in element 229 (4 owners) oddly related 1 times
Changed the ownership of 6 nodes
6 problematic sharings may still exist
The partitioning was optimized: 61
Checking partitioning after optimization
Checking for partitioning
Information on partition bandwidth
Average 19 elements with range 1 in partition
Average 22 nodes with range 10 in partition
Average 12 shared nodes with range 9 in partition

Elmergrid saving data with method 2:
-------------------------------------
Saving Elmer mesh in partitioned format
Number of boundary nodes at the boundary: 112
Reusing existing subdirectory: partitioning.20
Saving mesh in parallel ElmerSolver format to directory Mesh/partitioning.20.
Nodes belong to 4 partitions in maximum
Saving mesh for 20 partitions
   part  elements   nodes      shared   bc elems indirect
   1     19         21         13       13       0       
   2     19         23         12       2        0       
   3     19         18         16       1        0       
   4     19         22         13       2        0       
   5     20         27         8        14       0       
   6     19         20         14       12       0       
   7     19         22         13       0        0       
   8     19         18         16       0        0       
   9     19         22         13       0        0       
   10    20         26         9        12       0       
   11    19         20         14       12       0       
   12    19         22         13       0        0       
   13    19         18         16       0        0       
   14    19         22         13       0        0       
   15    20         26         9        12       0       
   16    19         22         12       14       0       
   17    19         22         13       2        0       
   18    19         20         14       1        0       
   19    19         22         13       2        0       
   20    20         28         7        13       0       
Nodes needed in maximum 2 boundary elements
----------------------------------------------------------------------------------------------
   ave   19.2       22.1       12.6     5.6      0.0     
Writing of partitioned mesh finished

Thank you for using Elmergrid!
Send bug reports and feature wishes to elmeradm@csc.fi
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ELMER SOLVER (v 8.3) STARTED AT: 2018/07/04 14:01:55
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
ParCommInit:  Initialize #PEs:           20
MAIN: 
MAIN: =============================================================
MAIN: ElmerSolver finite element software, Welcome!
MAIN: This program is free software licensed under (L)GPL
MAIN: Copyright 1st April 1995 - , CSC - IT Center for Science Ltd.
MAIN: Webpage http://www.csc.fi/elmer, Email elmeradm@csc.fi
MAIN: Version: 8.3 (Rev: f6873f2, Compiled: 2018-04-17)
MAIN:  Running in parallel using 20 tasks.
MAIN:  MUMPS library linked in.
MAIN:  Intel MKL linked in.
MAIN: =============================================================
MAIN: 
MAIN: 
MAIN: -------------------------------------
MAIN: Reading Model: Mismip3DInfluxRestart.sif
LoadInputFile: Scanning input file: Mismip3DInfluxRestart.sif
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
LoadInputFile: Loading input file: Mismip3DInfluxRestart.sif
Model Input:  Unlisted keyword: [water density] in section: [constants]
Model Input:  Unlisted keyword: [restart before initial conditions] in section: [simulation]
Model Input:  Unlisted keyword: [zs accumulation flux 1] in section: [body force 2]
Model Input:  Unlisted keyword: [zs accumulation flux 2] in section: [body force 2]
Model Input:  Unlisted keyword: [zs accumulation flux 3] in section: [body force 2]
Model Input:  Unlisted keyword: [zb accumulation] in section: [body force 3]
Model Input:  Unlisted keyword: [sea level] in section: [material 1]
Model Input:  Unlisted keyword: [limit temperature] in section: [material 1]
Model Input:  Unlisted keyword: [constant temperature] in section: [material 1]
Model Input:  Unlisted keyword: [min zs] in section: [material 1]
Model Input:  Unlisted keyword: [max zs] in section: [material 1]
Model Input:  Unlisted keyword: [max zb] in section: [material 1]
Model Input:  Unlisted keyword: [mesh update variable] in section: [solver 1]
Model Input:  Unlisted keyword: [top surface variable name] in section: [solver 1]
Model Input:  Unlisted keyword: [bottom surface variable name] in section: [solver 1]
Model Input:  Unlisted keyword: [correct surface] in section: [solver 1]
Model Input:  Unlisted keyword: [minimum height] in section: [solver 1]
Model Input:  Unlisted keyword: [computeall] in section: [solver 2]
Model Input:  Unlisted keyword: [h scale] in section: [solver 6]
Model Input:  Unlisted keyword: [dummy distance computation] in section: [solver 6]
Model Input:  Unlisted keyword: [relaxation factor] in section: [solver 7]
Model Input:  Unlisted keyword: [relaxation factor] in section: [solver 8]
Model Input:  Unlisted keyword: [toler] in section: [solver 9]
Model Input:  Unlisted keyword: [bedrock variable] in section: [solver 9]
Loading user function library: [ElmerIceUSF]...[SeaPressure]
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
Model Input:  Unlisted keyword: [compute sea pressure] in section: [boundary condition 3]
Model Input:  Unlisted keyword: [computenormal] in section: [boundary condition 3]
Model Input:  Unlisted keyword: [zb condition] in section: [boundary condition 5]
Loading user function library: [ElmerIceUSF]...[SlidCoef_Contact]
Loading user function library: [ElmerIceUSF]...[SlidCoef_Contact]
Model Input:  Unlisted keyword: [sliding law] in section: [boundary condition 5]
Model Input:  Unlisted keyword: [weertman friction coefficient] in section: [boundary condition 5]
Model Input:  Unlisted keyword: [weertman exponent] in section: [boundary condition 5]
Model Input:  Unlisted keyword: [weertman linear velocity] in section: [boundary condition 5]
Model Input:  Unlisted keyword: [grounding line definition] in section: [boundary condition 5]
Model Input:  Unlisted keyword: [test contact tolerance] in section: [boundary condition 5]
Model Input:  Unlisted keyword: [non detachment inland distance] in section: [boundary condition 5]
Loading user function library: [ElmerIceUSF]...[SeaPressure]
Loading user function library: [ElmerIceUSF]...[SeaSpring]
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
Model Input:  Unlisted keyword: [computenormal condition] in section: [boundary condition 5]
Model Input:  Unlisted keyword: [compute sea pressure] in section: [boundary condition 5]
Model Input:  Unlisted keyword: [compute sea spring] in section: [boundary condition 5]
Model Input:  Unlisted keyword: [distance] in section: [boundary condition 5]
Model Input:  Unlisted keyword: [distance condition] in section: [boundary condition 5]
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
Model Input:  Unlisted keyword: [computenormal] in section: [boundary condition 6]
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_Init0]
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_Init0]
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_Init0]
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_Init0]
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
Loading user function library: [src/DistanceSolveRD]...[DistanceSolver1_Init0]
Loading user function library: [./src/MyFreeSurfaceSolver]...[FreeSurfaceSolver_Init0]
WARNING:: LoadInputFile: Entry missing for: Initial Condition 1
WARNING:: LoadInputFile: Entry missing for: Initial Condition 2
WARNING:: LoadInputFile: Entry missing for: Initial Condition 3
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_Init0]
Loading user function library: [ElmerIceSolvers]...[GroundedSolver_Init0]
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_Init0]
LoadMesh: Starting
ElmerAsciiMesh: Performing step: 1
LoadMesh: Base mesh name: ./Mesh
LoadMesh: Reading header info from file: ./Mesh/partitioning.20/part.1.header
LoadMesh: Number of nodes in mesh: 34
LoadMesh: Number of bulk elements in mesh: 19
LoadMesh: Number of boundary elements in mesh: 13
LoadMesh: Initial number of max element nodes: 4
ElmerAsciiMesh: Performing step: 2
LoadMesh: Reading nodes from file: ./Mesh/partitioning.20/part.1.nodes
LoadMesh: Dimension of model is: 2
LoadMesh: Dimension of mesh is: 2
ElmerAsciiMesh: Performing step: 3
LoadMesh: Reading bulk elements from file: ./Mesh/partitioning.20/part.1.elements
ElmerAsciiMesh: Performing step: 4
LoadMesh: Reading boundary elements from file: ./Mesh/partitioning.20/part.1.boundary
LoadMesh: Performing node mapping
LoadMesh: Skipping remapping of bodies
LoadMesh: Remapping boundaries
LoadMesh: Minimum initial boundary index: 1
LoadMesh: Maximum initial boundary index: 2
ElmerAsciiMesh: Performing step: 5
LoadMesh: Reading nodes from file: ./Mesh/partitioning.20/part.1.shared
ElmerAsciiMesh: Performing step: 6
LoadMesh: Loading mesh done
LoadMesh: Elapsed REAL time:     0.0132 (s)
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0000 (s)
CompleteModelKeywords: Completing keywords for mortar BCs
UnitSegmentDivision: Creating linear division
UnitSegmentDivision: Mesh division ready
UnitSegmentDivision: w(0) :   0.0000E+00
UnitSegmentDivision: w(1) :   1.1111E-01
UnitSegmentDivision: w(2) :   2.2222E-01
UnitSegmentDivision: w(3) :   3.3333E-01
UnitSegmentDivision: w(4) :   4.4444E-01
UnitSegmentDivision: w(5) :   5.5556E-01
UnitSegmentDivision: w(6) :   6.6667E-01
UnitSegmentDivision: w(7) :   7.7778E-01
UnitSegmentDivision: w(8) :   8.8889E-01
UnitSegmentDivision: w(9) :   1.0000E+00
ExtrudeMesh: First Extruded BC set to: 5
ExtrudeMesh: Number of new BCs for layers: 1
MAIN: -------------------------------------
AddSolvers: Setting up 10 solvers
AddSolvers: Setting up solver 1: mapcoordinate
AddEquationBasics: Using procedure: StructuredMeshMapper StructuredMeshMapper
AddEquationBasics: Setting up solver: mapcoordinate
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_Init]
AddEquationBasics: Checking for _init solver
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_bulk]
AddEquationBasics: Checking for _bulk solver
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper]
AddEquationBasics: Time stepping method is: bdf
AddSolvers: Setting up solver 2: normalvector
AddEquationBasics: Using procedure: ElmerIceSolvers ComputeNormalSolver
AddEquationBasics: Setting up solver: normalvector
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_Init]
AddEquationBasics: Checking for _init solver
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_bulk]
AddEquationBasics: Checking for _bulk solver
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver]
AddEquationBasics: Time stepping method is: bdf
AddEquationBasics: Creating standard variable: normal vector
AddEquationBasics: Computing size of permutation vector
AddEquationBasics: Maximum size of permutation vector is: 340
AddEquationBasics: Creating solver matrix topology
CreateMatrix: creating initial permutation
CreateMatrix: Creating inverse of initial order os size: 340
CreateMatrix: Creating list matrix for equation
MakeListMatrix: Creating list matrix
OptimizeBandwidth: ---------------------------------------------------------
OptimizeBandwidth: Computing matrix structure for: normalvector...done.
OptimizeBandwidth: Half bandwidth without optimization: 57
OptimizeBandwidth: ---------------------------------------------------------
CreateMatrix: Initializing list matrix for equation
CRS_CreateMatrix: Creating CRS Matrix of size: 1020
CRS_CreateMatrix: Creating CRS Matrix with nofs: 53928
CRS_CreateMatrix: Creating CRS Matrix finished
CreateMatrix: Matrix created
AddEquationBasics: Number of rows in CRS matrix: 1020
AddEquationBasics: Creating solver variable
VariableAdd: Adding variable > normal vector < of size 1020
VariableAdd: Adding variable > normal vector 1 < of size 340
VariableAdd: Adding variable > normal vector 2 < of size 340
VariableAdd: Adding variable > normal vector 3 < of size 340
AddSolvers: Setting up solver 3: fw
AddEquationBasics: Using procedure: ElmerIceSolvers GetHydrostaticLoads
AddEquationBasics: Setting up solver: fw
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_Init]
AddEquationBasics: Checking for _init solver
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_bulk]
AddEquationBasics: Checking for _bulk solver
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads]
AddEquationBasics: Time stepping method is: bdf
AddEquationBasics: Creating standard variable: fw[fwater:3]
AddEquationBasics: Computing size of permutation vector
AddEquationBasics: Maximum size of permutation vector is: 340
AddEquationBasics: Creating solver matrix topology
CreateMatrix: creating initial permutation
CreateMatrix: Creating inverse of initial order os size: 34
CreateMatrix: Creating list matrix for equation
MakeListMatrix: Creating list matrix
OptimizeBandwidth: ---------------------------------------------------------
OptimizeBandwidth: Computing matrix structure for: fw...done.
OptimizeBandwidth: Half bandwidth without optimization: 27
OptimizeBandwidth: 
OptimizeBandwidth: Bandwidth Optimization ...done.
OptimizeBandwidth: Half bandwidth after optimization: 9
OptimizeBandwidth: ---------------------------------------------------------
CreateMatrix: Initializing list matrix for equation
CRS_CreateMatrix: Creating CRS Matrix of size: 102
CRS_CreateMatrix: Creating CRS Matrix with nofs: 1926
CRS_CreateMatrix: Creating CRS Matrix finished
CreateMatrix: Matrix created
AddEquationBasics: Number of rows in CRS matrix: 102
AddEquationBasics: Creating solver variable
VariableAdd: Adding variable > fw[fwater:3] < of size 102
VariableAdd: Adding variable > fwater 1 < of size 34
VariableAdd: Adding variable > fwater 2 < of size 34
VariableAdd: Adding variable > fwater 3 < of size 34
AddSolvers: Setting up solver 4: navier-stokes
AddEquationBasics: Setting up keywords internally for legacy solver: navier-stokes
AddEquationBasics: Using procedure: FlowSolve FlowSolver
AddEquationBasics: Setting up solver: navier-stokes
Loading user function library: [FlowSolve]...[FlowSolver_Init]
AddEquationBasics: Checking for _init solver
Loading user function library: [FlowSolve]...[FlowSolver_bulk]
AddEquationBasics: Checking for _bulk solver
Loading user function library: [FlowSolve]...[FlowSolver]
AddEquationBasics: Time stepping method is: bdf
AddEquationBasics: Creating standard variable: flow solution[velocity:3 pressure:1]
AddEquationBasics: Computing size of permutation vector
AddEquationBasics: Maximum size of permutation vector is: 340
AddEquationBasics: Creating solver matrix topology
CreateMatrix: creating initial permutation
CreateMatrix: Creating inverse of initial order os size: 340
CreateMatrix: Creating list matrix for equation
MakeListMatrix: Creating list matrix
OptimizeBandwidth: ---------------------------------------------------------
OptimizeBandwidth: Computing matrix structure for: navier-stokes...done.
OptimizeBandwidth: Half bandwidth without optimization: 57
OptimizeBandwidth: 
OptimizeBandwidth: Bandwidth Optimization ...done.
OptimizeBandwidth: Half bandwidth after optimization: 58
OptimizeBandwidth: Bandwidth optimization rejected, using original ordering.
OptimizeBandwidth: ---------------------------------------------------------
CreateMatrix: Initializing list matrix for equation
CRS_CreateMatrix: Creating CRS Matrix of size: 1360
CRS_CreateMatrix: Creating CRS Matrix with nofs: 95872
CRS_CreateMatrix: Creating CRS Matrix finished
CreateMatrix: Matrix created
AddEquationBasics: Number of rows in CRS matrix: 1360
AddEquationBasics: Creating solver variable
VariableAdd: Adding variable > flow solution[velocity:3 pressure:1] < of size 1360
VariableAdd: Adding variable > velocity 1 < of size 340
VariableAdd: Adding variable > velocity 2 < of size 340
VariableAdd: Adding variable > velocity 3 < of size 340
VariableAdd: Adding variable > pressure < of size 340
AddEquationBasics: Creating exported variable: flow solution loads[stress vector:3 ceq residual:1]
VariableAdd: Adding variable > flow solution loads[stress vector:3 ceq residual:1] < of size 1360
AddEquationBasics: Succesfully created variable: flow solution loads[stress vector:3 ceq residual:1]
VariableAdd: Adding variable > stress vector 1 < of size 340
AddEquationBasics: Succesfully created variable: stress vector 1
VariableAdd: Adding variable > stress vector 2 < of size 340
AddEquationBasics: Succesfully created variable: stress vector 2
VariableAdd: Adding variable > stress vector 3 < of size 340
AddEquationBasics: Succesfully created variable: stress vector 3
VariableAdd: Adding variable > ceq residual < of size 340
AddEquationBasics: Succesfully created variable: ceq residual
AddEquationBasics: Creating exported variable: -dofs 1 dsdt
VariableAdd: Adding variable > dsdt < of size 340
AddEquationBasics: Succesfully created variable: dsdt
AddEquationBasics: Creating exported variable: -dofs 1 ds
VariableAdd: Adding variable > ds < of size 340
AddEquationBasics: Succesfully created variable: ds
AddEquationBasics: Creating exported variable: -dofs 1 bedrock
VariableAdd: Adding variable > bedrock < of size 340
AddEquationBasics: Succesfully created variable: bedrock
AddSolvers: Setting up solver 5: heightdepth
AddEquationBasics: Using procedure: StructuredProjectToPlane StructuredProjectToPlane
AddEquationBasics: Setting up solver: heightdepth
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_Init]
AddEquationBasics: Checking for _init solver
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_bulk]
AddEquationBasics: Checking for _bulk solver
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane]
AddEquationBasics: Time stepping method is: bdf
AddSolvers: Setting up solver 6: solvedistance
AddEquationBasics: Using procedure: src/DistanceSolveRD DistanceSolver1
AddEquationBasics: Setting up solver: solvedistance
Loading user function library: [src/DistanceSolveRD]...[DistanceSolver1_Init]
AddEquationBasics: Checking for _init solver
Loading user function library: [src/DistanceSolveRD]...[DistanceSolver1_bulk]
AddEquationBasics: Checking for _bulk solver
Loading user function library: [src/DistanceSolveRD]...[DistanceSolver1]
AddEquationBasics: Time stepping method is: bdf
AddEquationBasics: Creating standard variable: distance
AddEquationBasics: Computing size of permutation vector
AddEquationBasics: Maximum size of permutation vector is: 340
AddEquationBasics: Creating solver matrix topology
CreateMatrix: creating initial permutation
CreateMatrix: Creating inverse of initial order os size: 34
CreateMatrix: Creating list matrix for equation
MakeListMatrix: Creating list matrix
OptimizeBandwidth: ---------------------------------------------------------
OptimizeBandwidth: Computing matrix structure for: solvedistance...done.
OptimizeBandwidth: Half bandwidth without optimization: 27
OptimizeBandwidth: 
OptimizeBandwidth: Bandwidth Optimization ...done.
OptimizeBandwidth: Half bandwidth after optimization: 9
OptimizeBandwidth: ---------------------------------------------------------
CreateMatrix: Initializing list matrix for equation
CRS_CreateMatrix: Creating CRS Matrix of size: 34
CRS_CreateMatrix: Creating CRS Matrix with nofs: 214
CRS_CreateMatrix: Creating CRS Matrix finished
CreateMatrix: Matrix created
AddEquationBasics: Number of rows in CRS matrix: 34
AddEquationBasics: Creating solver variable
VariableAdd: Adding variable > distance < of size 34
AddSolvers: Setting up solver 7: free surface top
AddEquationBasics: Using procedure: ./src/MyFreeSurfaceSolver FreeSurfaceSolver
AddEquationBasics: Setting up solver: free surface top
Loading user function library: [./src/MyFreeSurfaceSolver]...[FreeSurfaceSolver_Init]
AddEquationBasics: Checking for _init solver
Loading user function library: [./src/MyFreeSurfaceSolver]...[FreeSurfaceSolver_bulk]
AddEquationBasics: Checking for _bulk solver
Loading user function library: [./src/MyFreeSurfaceSolver]...[FreeSurfaceSolver]
AddEquationBasics: Time stepping method is: bdf
AddEquationBasics: Creating standard variable: zs
AddEquationBasics: Computing size of permutation vector
AddEquationBasics: Maximum size of permutation vector is: 340
AddEquationBasics: Creating solver matrix topology
CreateMatrix: creating initial permutation
CreateMatrix: Creating inverse of initial order os size: 34
CreateMatrix: Creating list matrix for equation
MakeListMatrix: Creating list matrix
OptimizeBandwidth: ---------------------------------------------------------
OptimizeBandwidth: Computing matrix structure for: free surface top...done.
OptimizeBandwidth: Half bandwidth without optimization: 27
OptimizeBandwidth: 
OptimizeBandwidth: Bandwidth Optimization ...done.
OptimizeBandwidth: Half bandwidth after optimization: 9
OptimizeBandwidth: ---------------------------------------------------------
CreateMatrix: Initializing list matrix for equation
CRS_CreateMatrix: Creating CRS Matrix of size: 34
CRS_CreateMatrix: Creating CRS Matrix with nofs: 214
CRS_CreateMatrix: Creating CRS Matrix finished
CreateMatrix: Matrix created
AddEquationBasics: Number of rows in CRS matrix: 34
AddEquationBasics: Creating solver variable
VariableAdd: Adding variable > zs < of size 34
AddEquationBasics: Creating exported variable: zs residual
VariableAdd: Adding variable > zs residual < of size 34
AddEquationBasics: Succesfully created variable: zs residual
Loading user function library: [EliminateDirichlet]...[EliminateDirichlet]
AddSolvers: Setting up solver 8: free surface sea/shelf
AddEquationBasics: Using procedure: FreeSurfaceSolver FreeSurfaceSolver
AddEquationBasics: Setting up solver: free surface sea/shelf
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_Init]
AddEquationBasics: Checking for _init solver
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_bulk]
AddEquationBasics: Checking for _bulk solver
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver]
AddEquationBasics: Time stepping method is: bdf
AddEquationBasics: Creating standard variable: zb
AddEquationBasics: Computing size of permutation vector
AddEquationBasics: Maximum size of permutation vector is: 340
AddEquationBasics: Creating solver matrix topology
CreateMatrix: creating initial permutation
CreateMatrix: Creating inverse of initial order os size: 34
CreateMatrix: Creating list matrix for equation
MakeListMatrix: Creating list matrix
OptimizeBandwidth: ---------------------------------------------------------
OptimizeBandwidth: Computing matrix structure for: free surface sea/shelf...done.
OptimizeBandwidth: Half bandwidth without optimization: 27
OptimizeBandwidth: 
OptimizeBandwidth: Bandwidth Optimization ...done.
OptimizeBandwidth: Half bandwidth after optimization: 9
OptimizeBandwidth: ---------------------------------------------------------
CreateMatrix: Initializing list matrix for equation
CRS_CreateMatrix: Creating CRS Matrix of size: 34
CRS_CreateMatrix: Creating CRS Matrix with nofs: 214
CRS_CreateMatrix: Creating CRS Matrix finished
CreateMatrix: Matrix created
AddEquationBasics: Number of rows in CRS matrix: 34
AddEquationBasics: Creating solver variable
VariableAdd: Adding variable > zb < of size 34
AddEquationBasics: Creating exported variable: zb residual
VariableAdd: Adding variable > zb residual < of size 34
AddEquationBasics: Succesfully created variable: zb residual
AddEquationBasics: Creating exported variable: zb accumulation
VariableAdd: Adding variable > zb accumulation < of size 34
AddEquationBasics: Succesfully created variable: zb accumulation
AddSolvers: Setting up solver 9: groundedmask
AddEquationBasics: Using procedure: ElmerIceSolvers GroundedSolver
AddEquationBasics: Setting up solver: groundedmask
Loading user function library: [ElmerIceSolvers]...[GroundedSolver_Init]
AddEquationBasics: Checking for _init solver
Loading user function library: [ElmerIceSolvers]...[GroundedSolver_bulk]
AddEquationBasics: Checking for _bulk solver
Loading user function library: [ElmerIceSolvers]...[GroundedSolver]
AddEquationBasics: Time stepping method is: bdf
AddEquationBasics: Creating standard variable: groundedmask
AddEquationBasics: Computing size of permutation vector
AddEquationBasics: Maximum size of permutation vector is: 340
AddEquationBasics: Creating solver matrix topology
CreateMatrix: creating initial permutation
CreateMatrix: Creating inverse of initial order os size: 34
CreateMatrix: Creating list matrix for equation
MakeListMatrix: Creating list matrix
OptimizeBandwidth: ---------------------------------------------------------
OptimizeBandwidth: Computing matrix structure for: groundedmask...done.
OptimizeBandwidth: Half bandwidth without optimization: 27
OptimizeBandwidth: 
OptimizeBandwidth: Bandwidth Optimization ...done.
OptimizeBandwidth: Half bandwidth after optimization: 9
OptimizeBandwidth: ---------------------------------------------------------
CreateMatrix: Initializing list matrix for equation
CRS_CreateMatrix: Creating CRS Matrix of size: 34
CRS_CreateMatrix: Creating CRS Matrix with nofs: 214
CRS_CreateMatrix: Creating CRS Matrix finished
CreateMatrix: Matrix created
AddEquationBasics: Number of rows in CRS matrix: 34
AddEquationBasics: Creating solver variable
VariableAdd: Adding variable > groundedmask < of size 34
AddSolvers: Setting up solver 10: result output
AddEquationBasics: Using procedure: ResultOutputSolve ResultOutputSolver
AddEquationBasics: Setting up solver: result output
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_Init]
AddEquationBasics: Checking for _init solver
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_bulk]
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
AddEquationBasics: Checking for _bulk solver
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver]
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
AddEquationBasics: Time stepping method is: bdf
AddSolvers: Setting up solvers done
AddMeshCoordinatesAndTime: Setting mesh coordinates and time
VariableAdd: Adding variable > Coordinate 1 < of size 340
VariableAdd: Adding variable > Coordinate 2 < of size 340
VariableAdd: Adding variable > Coordinate 3 < of size 340
VariableAdd: Adding variable > Time < of size 1
VariableAdd: Adding variable > Periodic Time < of size 1
VariableAdd: Adding variable > Timestep < of size 1
VariableAdd: Adding variable > Timestep size < of size 1
VariableAdd: Adding variable > Timestep interval < of size 1
VariableAdd: Adding variable > nonlin iter < of size 1
VariableAdd: Adding variable > coupled iter < of size 1
VariableAdd: Adding variable > Partition < of size 1
SetInitialConditions: Setting up initial conditions (if any)
LoadRestartFile: 
LoadRestartFile: --------------------------------------------
LoadRestartFile: Reading data from file: Mesh/Initial5KM10L.result.0
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
LoadRestartFile: ASCII 3
LoadRestartFile: 
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
WARNING:: LoadRestartFile: Could not associate variable to solver: groundedmask
LoadRestartFile: Creating variable: depth
VariableAdd: Adding variable > depth < of size 340
LoadRestartFile: Creating variable: height
VariableAdd: Adding variable > height < of size 340
LoadRestartFile: Creating variable: bottom zb
VariableAdd: Adding variable > bottom zb < of size 34
LoadRestartFile: Total number of dofs to load: 27
LoadRestartFile: Reading time sequence:    1.000E-02
LoadRestartFile: Reading timestep: 1
LoadRestartFile: Reading Variable: groundedmask
LoadRestartFile: Reading Variable: normal vector 1
LoadRestartFile: Reading Variable: normal vector 2
LoadRestartFile: Reading Variable: normal vector 3
LoadRestartFile: Reading Variable: fwater 1
LoadRestartFile: Reading Variable: fwater 2
LoadRestartFile: Reading Variable: fwater 3
LoadRestartFile: Reading Variable: velocity 1
LoadRestartFile: Reading Variable: velocity 2
LoadRestartFile: Reading Variable: velocity 3
LoadRestartFile: Reading Variable: pressure
LoadRestartFile: Reading Variable: stress vector 1
LoadRestartFile: Reading Variable: stress vector 2
LoadRestartFile: Reading Variable: stress vector 3
LoadRestartFile: Reading Variable: ceq residual
LoadRestartFile: Reading Variable: dsdt
LoadRestartFile: Reading Variable: ds
LoadRestartFile: Reading Variable: bedrock
LoadRestartFile: Reading Variable: distance
LoadRestartFile: Reading Variable: zs
LoadRestartFile: Reading Variable: zs residual
LoadRestartFile: Reading Variable: zb
LoadRestartFile: Reading Variable: zb residual
LoadRestartFile: Reading Variable: zb accumulation
LoadRestartFile: Reading Variable: depth
LoadRestartFile: Reading Variable: height
LoadRestartFile: Reading Variable: bottom zb
LoadRestartFile: Time spent for restart (s):      3.0270E-03
LoadRestartFile: All done
LoadRestartFile: --------------------------------------------
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 1/20  0.510000000000000
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SetActiveElementsTable: Creating table showing active element indexes
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
DetectExtrudedStructure: Determining extruded structure
DetectExtrudedStructure: Unit vector of direction:   0.000   0.000   1.000
DetectExtrudedStructure: Applying mask to the whole mesh
DetectExtrudedStructure: determine up and down pointers
DetectExtrudedStructure: determine top and bottom pointers
DetectExtrudedStructure: Layered structure detected in 9 cycles
DetectExtrudedStructure: counting top and bottom bodes
DetectExtrudedStructure: Setting pointer structures
DetectExtrudedStructure:  Top and bottom pointer init time:   0.000000000000000E+000
DetectExtrudedStructure:  Top and bottom pointer init rounds:            9
DetectExtrudedStructure:  Number of nodes at the top:           34
DetectExtrudedStructure:  Number of nodes at the bottom:           34
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   0.000000000000000E+000
SetActiveElementsTable: Creating table showing active element indexes
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 25956
ListToCRSMatrix: Matrix format changed from List to CRS
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SetActiveElementsTable: Creating table showing active element indexes
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 927
ListToCRSMatrix: Matrix format changed from List to CRS
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
GetHydrostaticLoads: Memory allocation done.
SeaPressure: Water Density =     0.0000
SeaPressure: Variable Buoyancy Use Basal Melt not found. Setting to FALSE
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SetActiveElementsTable: Creating table showing active element indexes
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 46144
ListToCRSMatrix: Matrix format changed from List to CRS
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
 Flow Solution                                                                  
                                                   F
 Flow Solution                                                                  
 Flow Solution                                                                  
                                                   F
                                                   F
 Flow Solution                                                                  
                                                   F
 Flow Solution                                                                  
                                                   F
 Flow Solution                                                                  
                                                   F
SeaSpring: Water Density =     0.0000
 Flow Solution                                                                  
                                                   F
SlidCoef_Contact: Using default name >Flow Solution<
SlidCoef_Contact: Grounding Line Defined as discontinuous
SlidCoef_Contact: GL may move by default
SlidCoef_Contact: If you want to fix the Grounding Line, put the keyword "Grounding line moves" to False
SlidCoef_Contact: Contact tested for a tolerance of 0.10000000E-02
SlidCoef_Contact: far inland nodes will not detach
 Flow Solution                                                                  
                                                   F
 Flow Solution                                                                  
                                                   F
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
 Flow Solution                                                                  
                                                   F
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  137.01298      2.0000000     ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.28    0.28
FlowSolve:  Result Norm     :    137.012981251435
FlowSolve:  Relative Change :    2.00000000000000
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  139.35335     0.16936699E-01 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.14
FlowSolve: iter:    2 Solve:    (s)    0.28    0.56
FlowSolve:  Result Norm     :    139.353347971107
FlowSolve:  Relative Change :   1.693669938922124E-002
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  140.88169     0.10907544E-01 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.83
FlowSolve:  Result Norm     :    140.881685966532
FlowSolve:  Relative Change :   1.090754409931689E-002
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  141.86252     0.69379614E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.27
FlowSolve: iter:    4 Solve:    (s)    0.27    1.09
FlowSolve:  Result Norm     :    141.862520161348
FlowSolve:  Relative Change :   6.937961405106607E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  142.48949     0.44098494E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.37
FlowSolve:  Result Norm     :    142.489494940361
FlowSolve:  Relative Change :   4.409849381856258E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  142.89104     0.28141104E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.27    1.63
FlowSolve:  Result Norm     :    142.891041111690
FlowSolve:  Relative Change :   2.814110428722677E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  143.14934     0.18060069E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.47
FlowSolve: iter:    7 Solve:    (s)    0.27    1.90
FlowSolve:  Result Norm     :    143.149336561868
FlowSolve:  Relative Change :   1.806006916073774E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  143.31633     0.11658745E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.26    2.17
FlowSolve:  Result Norm     :    143.316328066378
FlowSolve:  Relative Change :   1.165874484310020E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  143.42482     0.75671142E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.60
FlowSolve: iter:    9 Solve:    (s)    0.27    2.44
FlowSolve:  Result Norm     :    143.424818216501
FlowSolve:  Relative Change :   7.567114209375677E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  143.49561     0.49344030E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.67
FlowSolve: iter:   10 Solve:    (s)    0.27    2.70
FlowSolve:  Result Norm     :    143.495607266668
FlowSolve:  Relative Change :   4.934402982865734E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  143.54197     0.32302042E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.27    2.97
FlowSolve:  Result Norm     :    143.541966765294
FlowSolve:  Relative Change :   3.230204183714155E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  143.57242     0.21213369E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.80
FlowSolve: iter:   12 Solve:    (s)    0.27    3.24
FlowSolve:  Result Norm     :    143.572420083056
FlowSolve:  Relative Change :   2.121336941419863E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  143.59247     0.13967218E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.87
FlowSolve: iter:   13 Solve:    (s)    0.27    3.50
FlowSolve:  Result Norm     :    143.592474556431
FlowSolve:  Relative Change :   1.396721796424937E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  143.60571     0.92153544E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.93
FlowSolve: iter:   14 Solve:    (s)    0.27    3.77
FlowSolve:  Result Norm     :    143.605707721552
FlowSolve:  Relative Change :   9.215354370106023E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          15
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=15) (NRM,RELC): (  143.61445     0.60902962E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   15 Assembly: (s)    0.07    1.00
FlowSolve: iter:   15 Solve:    (s)    0.27    4.04
FlowSolve:  Result Norm     :    143.614454000861
FlowSolve:  Relative Change :   6.090296207771215E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          16
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=16) (NRM,RELC): (  143.62024     0.40303512E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   16 Assembly: (s)    0.07    1.07
FlowSolve: iter:   16 Solve:    (s)    0.26    4.30
FlowSolve:  Result Norm     :    143.620242284445
FlowSolve:  Relative Change :   4.030351248546091E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          17
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=17) (NRM,RELC): (  143.62408     0.26699945E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   17 Assembly: (s)    0.07    1.13
FlowSolve: iter:   17 Solve:    (s)    0.26    4.56
FlowSolve:  Result Norm     :    143.624076988199
FlowSolve:  Relative Change :   2.669994493700404E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          18
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=18) (NRM,RELC): (  143.62662     0.17703207E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   18 Assembly: (s)    0.07    1.20
FlowSolve: iter:   18 Solve:    (s)    0.26    4.83
FlowSolve:  Result Norm     :    143.626619617513
FlowSolve:  Relative Change :   1.770320729510174E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          19
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=19) (NRM,RELC): (  143.62831     0.11745844E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   19 Assembly: (s)    0.07    1.26
FlowSolve: iter:   19 Solve:    (s)    0.26    5.09
FlowSolve:  Result Norm     :    143.628306643315
FlowSolve:  Relative Change :   1.174584418564797E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          20
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=20) (NRM,RELC): (  143.62943     0.77974883E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   20 Assembly: (s)    0.07    1.33
FlowSolve: iter:   20 Solve:    (s)    0.27    5.36
FlowSolve:  Result Norm     :    143.629426587718
FlowSolve:  Relative Change :   7.797488267571675E-006
SetActiveElementsTable: Creating table showing active element indexes
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
DetectExtrudedStructure: Determining extruded structure
DetectExtrudedStructure: Unit vector of direction:   0.000   0.000   1.000
DetectExtrudedStructure: Applying mask to the whole mesh
DetectExtrudedStructure: determine up and down pointers
DetectExtrudedStructure: determine top and bottom pointers
DetectExtrudedStructure: Layered structure detected in 9 cycles
DetectExtrudedStructure: counting top and bottom bodes
DetectExtrudedStructure: Setting pointer structures
DetectExtrudedStructure:  Top and bottom pointer init time:   2.089999999999037E-004
DetectExtrudedStructure:  Top and bottom pointer init rounds:            9
DetectExtrudedStructure:  Number of nodes at the top:           34
DetectExtrudedStructure:  Number of nodes at the bottom:           34
StructuredProjectoToPlane: Number of top nodes: 34
StructuredProjectoToPlane: Number of bot nodes: 34
StructuredProjectToPlane:  Projection time:   9.600000000009601E-005
StructuredProjectToPlane: ------------------------------------------
SetActiveElementsTable: Creating table showing active element indexes
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0011 (s)
DistanceSolver1: All done
SetActiveElementsTable: Creating table showing active element indexes
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.5425E-04
       2 0.1413E-04
       3 0.5359E-05
       4 0.8847E-06
       4 0.8847E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   2.969999999997697E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  828.94989      2.0000000     ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   6.940000000001945E-004
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.670000000006723E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.949893494267
FreeSurfaceSolver (zs):  Relative Change :    2.00000000000000
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.169300E+04/ 0.116728E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.2066E-06
       1 0.2066E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   4.369999999997987E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  828.94983     0.82173447E-07 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   8.070000000000022E-004
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.400000000004511E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.949825376599
FreeSurfaceSolver (zs):  Relative Change :   8.217344722241730E-008
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.169300E+04/ 0.116728E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after2 iterations
SetActiveElementsTable: Creating table showing active element indexes
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1117E-04
       2 0.9054E-06
       2 0.9054E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.24953      2.0000000     ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.249530530351
FreeSurfaceSolver (zb):  Relative Change :    2.00000000000000
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 10
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1216E-06
       1 0.1216E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.24953     0.76632206E-08 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.249528558992
FreeSurfaceSolver (zb):  Relative Change :   7.663220595948615E-009
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 14
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SetActiveElementsTable: Creating table showing active element indexes
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Memory allocation done.
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
SaveResult: -----------------------------------------
SaveResult: Saving results to file: ./Mesh/Forward5KM10L.result.0
SaveResult: Writing the header part
SaveResult: Writing data for the current timestep
SaveResult: Done writing results file
SaveResult: -----------------------------------------
SetActiveElementsTable: Creating table showing active element indexes
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: result output
ResultOutputSolver: -------------------------------------
ResultOutputSolve: Saving with prefix: Forward5KM10L
ResultOutputSolve: Number of output meshes: 1
ResultOutputSolver: Working on mesh: Mesh
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Creating list for saving - if not present
CreateListForSaving: Field Variables for Saving
CreateListForSaving: Scalar Field 1: pressure
CreateListForSaving: Scalar Field 2: ceq residual
CreateListForSaving: Scalar Field 3: dsdt
CreateListForSaving: Scalar Field 4: ds
CreateListForSaving: Scalar Field 5: bedrock
CreateListForSaving: Scalar Field 6: distance
CreateListForSaving: Scalar Field 7: zs
CreateListForSaving: Scalar Field 8: zs residual
CreateListForSaving: Scalar Field 9: zb
CreateListForSaving: Scalar Field 10: zb residual
CreateListForSaving: Scalar Field 11: zb accumulation
CreateListForSaving: Scalar Field 12: groundedmask
CreateListForSaving: Scalar Field 13: depth
CreateListForSaving: Scalar Field 14: height
CreateListForSaving: Scalar Field 15: bottom zb
CreateListForSaving: Vector Field 1: normal vector
CreateListForSaving: Vector Field 2: fwater
CreateListForSaving: Vector Field 3: velocity
CreateListForSaving: Vector Field 4: stress vector
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
VtuOutputSolver: Saving results in VTK XML format with prefix: Forward5KM10L
VtuOutputSolver: Saving number of partitions: 20
VtuOutputSolver: Full filename base is: ./Mesh/Forward5KM10L
VtuOutputSolver: Number of active elements 326 out of 326
VtuOutputSolver: Number of geometry nodes 340 out of 340
VtuOutputSolver: Total number of geometry nodes to save:    6920
VtuOutputSolver: Total number of dof nodes to save:    6920
VtuOutputSolver: Total number of elements to save:    5232
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the pvtu file: ./Mesh/Forward5KM10L0001.pvtu
WritePvtuFile: Number of active partitions is 20 (out of 20)
WritePvtuFile: List of active partitions was composed
VtuOutputSolver: Finished writing pvtu file
VtuOutputSolver: Writing the vtu file: ./Mesh/Forward5KM10L0001par0001.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
AscBinWriteInit: Writing in binary
AscBinWriteInit: Writing in double precision
AscBinWriteInit: Writing to unit number: 58
AscBinWriteInit: Size of buffer is: 340
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Number of nodal fields written: 19
VtuOutputSolver: Writing elemental fields
VtuOutputSolver: Number of elemental fields written: 0
VtuOutputSolver: Writing entity IDs for bodies and boundaries
VtuOutputSolver: Writing coordinates for each used node
VtuOutputSolver: Writing the elemental connectivity data
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Writing elemental fields
AscBinWriteInit: Terminating buffered ascii/binary writing
VtuOutputSolver: Finished writing vtu file
VtuOutputSolver: All done for now
ResultOutputSolver: -------------------------------------
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 2/20   1.01000000000000
MAIN: Estimated time left:  2.3 minutes
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   2.000000000013102E-005
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  143.55982     0.48476688E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.06    0.06
FlowSolve: iter:    1 Solve:    (s)    0.26    0.26
FlowSolve:  Result Norm     :    143.559816671035
FlowSolve:  Relative Change :   4.847668797978177E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  143.15813     0.28019362E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.27    0.54
FlowSolve:  Result Norm     :    143.158133968500
FlowSolve:  Relative Change :   2.801936199939675E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  142.92046     0.16616191E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.81
FlowSolve:  Result Norm     :    142.920457144814
FlowSolve:  Relative Change :   1.661619086984810E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  142.81359     0.74800578E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.26
FlowSolve: iter:    4 Solve:    (s)    0.27    1.07
FlowSolve:  Result Norm     :    142.813591784438
FlowSolve:  Relative Change :   7.480057821324131E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  142.77537     0.26766578E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.35
FlowSolve:  Result Norm     :    142.775370587811
FlowSolve:  Relative Change :   2.676657830897227E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  142.76815     0.50598397E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.27    1.62
FlowSolve:  Result Norm     :    142.768146565715
FlowSolve:  Relative Change :   5.059839682638571E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  142.77289     0.33216659E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.46
FlowSolve: iter:    7 Solve:    (s)    0.27    1.89
FlowSolve:  Result Norm     :    142.772888925317
FlowSolve:  Relative Change :   3.321665899616692E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  142.78093     0.56313836E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.28    2.17
FlowSolve:  Result Norm     :    142.780929240788
FlowSolve:  Relative Change :   5.631383619265699E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  142.78875     0.54777684E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.60
FlowSolve: iter:    9 Solve:    (s)    0.27    2.44
FlowSolve:  Result Norm     :    142.788750663572
FlowSolve:  Relative Change :   5.477768359206728E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  142.79520     0.45176315E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.66
FlowSolve: iter:   10 Solve:    (s)    0.27    2.71
FlowSolve:  Result Norm     :    142.795201478816
FlowSolve:  Relative Change :   4.517631467575173E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  142.80012     0.34468548E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.28    2.99
FlowSolve:  Result Norm     :    142.800123506927
FlowSolve:  Relative Change :   3.446854818939355E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  142.80372     0.25172317E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.80
FlowSolve: iter:   12 Solve:    (s)    0.27    3.25
FlowSolve:  Result Norm     :    142.803718162177
FlowSolve:  Relative Change :   2.517231720949568E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  142.80627     0.17892531E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.86
FlowSolve: iter:   13 Solve:    (s)    0.27    3.52
FlowSolve:  Result Norm     :    142.806273305058
FlowSolve:  Relative Change :   1.789253147907803E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  142.80806     0.12494356E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.93
FlowSolve: iter:   14 Solve:    (s)    0.28    3.79
FlowSolve:  Result Norm     :    142.808057588684
FlowSolve:  Relative Change :   1.249435642602784E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          15
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=15) (NRM,RELC): (  142.80929     0.86199789E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   15 Assembly: (s)    0.07    1.00
FlowSolve: iter:   15 Solve:    (s)    0.27    4.07
FlowSolve:  Result Norm     :    142.809288596426
FlowSolve:  Relative Change :   8.619978852467713E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   2.999999999886427E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.4823E-04
       2 0.1171E-04
       3 0.1018E-04
       4 0.1123E-05
       5 0.9140E-06
       5 0.9140E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   7.750000000008583E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  828.93500     0.17889220E-04 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.162000000000774E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.570000000010509E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.934996243568
FreeSurfaceSolver (zs):  Relative Change :   1.788921985091633E-005
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.169103E+04/ 0.116754E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1791E-06
       1 0.1791E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   4.350000000012955E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  828.93510     0.12600572E-06 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   8.410000000012019E-004
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.700000000002035E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.935100694128
FreeSurfaceSolver (zs):  Relative Change :   1.260057227418788E-007
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.169103E+04/ 0.116754E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.4249E-04
       2 0.5049E-05
       3 0.2692E-05
       4 0.1037E-06
       4 0.1037E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.29338     0.17043232E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.293375928552
FreeSurfaceSolver (zb):  Relative Change :   1.704323164415316E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 6
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1645E-07
       1 0.1645E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.29338     0.50353133E-08 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.293377224104
FreeSurfaceSolver (zb):  Relative Change :   5.035313255103363E-009
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 6
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 3/20   1.51000000000000
MAIN: Estimated time left:  1.6 minutes
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   0.000000000000000E+000
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  144.71525     0.13257736E-01 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.27    0.27
FlowSolve:  Result Norm     :    144.715250752088
FlowSolve:  Relative Change :   1.325773556567250E-002
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  145.57017     0.58901731E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.14
FlowSolve: iter:    2 Solve:    (s)    0.27    0.54
FlowSolve:  Result Norm     :    145.570166425140
FlowSolve:  Relative Change :   5.890173067361445E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  145.97818     0.27989373E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.82
FlowSolve:  Result Norm     :    145.978179199836
FlowSolve:  Relative Change :   2.798937334532493E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  146.17081     0.13186955E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.27
FlowSolve: iter:    4 Solve:    (s)    0.27    1.09
FlowSolve:  Result Norm     :    146.170806973040
FlowSolve:  Relative Change :   1.318695476080312E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  146.25996     0.60973892E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.34
FlowSolve: iter:    5 Solve:    (s)    0.27    1.36
FlowSolve:  Result Norm     :    146.259960183355
FlowSolve:  Relative Change :   6.097389216751491E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  146.29978     0.27220523E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.27    1.63
FlowSolve:  Result Norm     :    146.299778329093
FlowSolve:  Relative Change :   2.722052319326478E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  146.31640     0.11360912E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.47
FlowSolve: iter:    7 Solve:    (s)    0.27    1.90
FlowSolve:  Result Norm     :    146.316400262134
FlowSolve:  Relative Change :   1.136091184098766E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  146.32241     0.41060903E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.54
FlowSolve: iter:    8 Solve:    (s)    0.27    2.17
FlowSolve:  Result Norm     :    146.322408268984
FlowSolve:  Relative Change :   4.106090289271344E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  146.32380     0.95225346E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.60
FlowSolve: iter:    9 Solve:    (s)    0.27    2.44
FlowSolve:  Result Norm     :    146.323801635819
FlowSolve:  Relative Change :   9.522534640401288E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   3.099999999989222E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.4291E-04
       2 0.1081E-04
       3 0.4481E-04
       4 0.9943E-06
       4 0.9943E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   7.890000000010389E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  828.92688     0.99229647E-05 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.177000000000206E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.510000000002123E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.926875241237
FreeSurfaceSolver (zs):  Relative Change :   9.922964650399986E-006
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.168939E+04/ 0.116780E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after1 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3861E-04
       2 0.4720E-05
       3 0.1360E-05
       4 0.1061E-06
       4 0.1061E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.34062     0.18359876E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.340620305266
FreeSurfaceSolver (zb):  Relative Change :   1.835987571287569E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 5
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1521E-07
       1 0.1521E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.34062     0.25838156E-08 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.340620970186
FreeSurfaceSolver (zb):  Relative Change :   2.583815635966909E-009
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 8
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: result output
ResultOutputSolver: -------------------------------------
ResultOutputSolve: Number of output meshes: 1
ResultOutputSolver: Working on mesh: Mesh
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
VtuOutputSolver: Full filename base is: ./Mesh/Forward5KM10L
VtuOutputSolver: Number of active elements 326 out of 326
VtuOutputSolver: Number of geometry nodes 340 out of 340
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the pvtu file: ./Mesh/Forward5KM10L0002.pvtu
WritePvtuFile: Number of active partitions is 20 (out of 20)
WritePvtuFile: List of active partitions was composed
VtuOutputSolver: Finished writing pvtu file
VtuOutputSolver: Writing the vtu file: ./Mesh/Forward5KM10L0001par0002.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
AscBinWriteInit: Writing in binary
AscBinWriteInit: Writing in double precision
AscBinWriteInit: Writing to unit number: 58
AscBinWriteInit: Size of buffer is: 340
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Number of nodal fields written: 19
VtuOutputSolver: Writing elemental fields
VtuOutputSolver: Number of elemental fields written: 0
VtuOutputSolver: Writing entity IDs for bodies and boundaries
VtuOutputSolver: Writing coordinates for each used node
VtuOutputSolver: Writing the elemental connectivity data
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Writing elemental fields
AscBinWriteInit: Terminating buffered ascii/binary writing
VtuOutputSolver: Finished writing vtu file
VtuOutputSolver: All done for now
ResultOutputSolver: -------------------------------------
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 4/20   2.01000000000000
MAIN: Estimated time left: 55.8 seconds
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   1.599999999868373E-005
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  147.72253     0.95136477E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.27    0.27
FlowSolve:  Result Norm     :    147.722528228480
FlowSolve:  Relative Change :   9.513647684742166E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  148.32637     0.40793639E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.27    0.55
FlowSolve:  Result Norm     :    148.326373827997
FlowSolve:  Relative Change :   4.079363884298332E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  148.62600     0.20179891E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.82
FlowSolve:  Result Norm     :    148.625997151010
FlowSolve:  Relative Change :   2.017989093837692E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  148.77903     0.10291328E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.26
FlowSolve: iter:    4 Solve:    (s)    0.27    1.09
FlowSolve:  Result Norm     :    148.779031780871
FlowSolve:  Relative Change :   1.029132764909757E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  148.85784     0.52955834E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.36
FlowSolve:  Result Norm     :    148.857839825368
FlowSolve:  Relative Change :   5.295583445138289E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  148.89836     0.27217766E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.28    1.64
FlowSolve:  Result Norm     :    148.898361118945
FlowSolve:  Relative Change :   2.721776637951660E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  148.91901     0.13867308E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.46
FlowSolve: iter:    7 Solve:    (s)    0.27    1.91
FlowSolve:  Result Norm     :    148.919010745752
FlowSolve:  Relative Change :   1.386730846345317E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  148.92936     0.69513069E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.18
FlowSolve:  Result Norm     :    148.929362923064
FlowSolve:  Relative Change :   6.951306924947407E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  148.93442     0.33960746E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.60
FlowSolve: iter:    9 Solve:    (s)    0.27    2.46
FlowSolve:  Result Norm     :    148.934420761214
FlowSolve:  Relative Change :   3.396074599904956E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  148.93679     0.15937735E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.67
FlowSolve: iter:   10 Solve:    (s)    0.27    2.72
FlowSolve:  Result Norm     :    148.936794457402
FlowSolve:  Relative Change :   1.593773460858529E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  148.93784     0.69946175E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.27    2.99
FlowSolve:  Result Norm     :    148.937836216952
FlowSolve:  Relative Change :   6.994617484003429E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   3.200000000092018E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3883E-04
       2 0.1007E-04
       3 0.2193E-04
       4 0.1079E-05
       5 0.2068E-06
       5 0.2068E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   2.410000000026002E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  828.92327     0.43533123E-05 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   5.769999999998277E-004
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.359999999972274E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.923266671547
FreeSurfaceSolver (zs):  Relative Change :   4.353312278822145E-006
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.168794E+04/ 0.116806E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after1 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3867E-04
       2 0.4707E-05
       3 0.1243E-05
       4 0.1011E-06
       4 0.1011E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.38889     0.18756672E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.388894034103
FreeSurfaceSolver (zb):  Relative Change :   1.875667219756072E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 10
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1368E-07
       1 0.1368E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.38889     0.27780617E-08 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.388894749145
FreeSurfaceSolver (zb):  Relative Change :   2.778061715186086E-009
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 11
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 5/20   2.51000000000000
MAIN: Estimated time left:  1.1 minutes
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   0.000000000000000E+000
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  150.21841     0.85612405E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.27    0.27
FlowSolve:  Result Norm     :    150.218410502468
FlowSolve:  Relative Change :   8.561240485922108E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  150.79808     0.38513883E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.27    0.55
FlowSolve:  Result Norm     :    150.798076187092
FlowSolve:  Relative Change :   3.851388281085447E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  151.10294     0.20196133E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.81
FlowSolve:  Result Norm     :    151.102937834850
FlowSolve:  Relative Change :   2.019613274534841E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  151.26867     0.10962268E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.27
FlowSolve: iter:    4 Solve:    (s)    0.27    1.09
FlowSolve:  Result Norm     :    151.268671770294
FlowSolve:  Relative Change :   1.096226829367582E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  151.35981     0.60232183E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.36
FlowSolve:  Result Norm     :    151.359811641137
FlowSolve:  Relative Change :   6.023218291652388E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  151.41015     0.33251628E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.27    1.63
FlowSolve:  Result Norm     :    151.410149612227
FlowSolve:  Relative Change :   3.325162832040229E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  151.43799     0.18384504E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.47
FlowSolve: iter:    7 Solve:    (s)    0.27    1.90
FlowSolve:  Result Norm     :    151.437988176899
FlowSolve:  Relative Change :   1.838450444183239E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  151.45338     0.10163650E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.17
FlowSolve:  Result Norm     :    151.453380586864
FlowSolve:  Relative Change :   1.016365043853268E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  151.46188     0.56134368E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.60
FlowSolve: iter:    9 Solve:    (s)    0.28    2.45
FlowSolve:  Result Norm     :    151.461882565350
FlowSolve:  Relative Change :   5.613436838930746E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  151.46657     0.30956827E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.67
FlowSolve: iter:   10 Solve:    (s)    0.27    2.72
FlowSolve:  Result Norm     :    151.466571417261
FlowSolve:  Relative Change :   3.095682725635271E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  151.46915     0.17039542E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.27    2.99
FlowSolve:  Result Norm     :    151.469152360260
FlowSolve:  Relative Change :   1.703954202990134E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  151.47057     0.93575841E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.80
FlowSolve: iter:   12 Solve:    (s)    0.27    3.27
FlowSolve:  Result Norm     :    151.470569752227
FlowSolve:  Relative Change :   9.357584126886133E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   2.900000000138903E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3532E-04
       2 0.9560E-05
       3 0.9590E-05
       4 0.1204E-05
       5 0.1675E-06
       5 0.1675E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   8.230000000004623E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  828.92306     0.24614122E-06 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.250999999999891E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.910000000004743E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.923062639391
FreeSurfaceSolver (zs):  Relative Change :   2.461412173406734E-007
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.168665E+04/ 0.116831E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after1 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3857E-04
       2 0.4703E-05
       3 0.1151E-05
       4 0.9455E-07
       4 0.9455E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.43842     0.19238788E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.438418015717
FreeSurfaceSolver (zb):  Relative Change :   1.923878758725776E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 5
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1292E-07
       1 0.1292E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.43842     0.31400355E-08 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.438418824083
FreeSurfaceSolver (zb):  Relative Change :   3.140035484800713E-009
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 5
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: result output
ResultOutputSolver: -------------------------------------
ResultOutputSolve: Number of output meshes: 1
ResultOutputSolver: Working on mesh: Mesh
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
VtuOutputSolver: Full filename base is: ./Mesh/Forward5KM10L
VtuOutputSolver: Number of active elements 326 out of 326
VtuOutputSolver: Number of geometry nodes 340 out of 340
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the pvtu file: ./Mesh/Forward5KM10L0003.pvtu
WritePvtuFile: Number of active partitions is 20 (out of 20)
WritePvtuFile: List of active partitions was composed
VtuOutputSolver: Finished writing pvtu file
VtuOutputSolver: Writing the vtu file: ./Mesh/Forward5KM10L0001par0003.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
AscBinWriteInit: Writing in binary
AscBinWriteInit: Writing in double precision
AscBinWriteInit: Writing to unit number: 58
AscBinWriteInit: Size of buffer is: 340
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Number of nodal fields written: 19
VtuOutputSolver: Writing elemental fields
VtuOutputSolver: Number of elemental fields written: 0
VtuOutputSolver: Writing entity IDs for bodies and boundaries
VtuOutputSolver: Writing coordinates for each used node
VtuOutputSolver: Writing the elemental connectivity data
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Writing elemental fields
AscBinWriteInit: Terminating buffered ascii/binary writing
VtuOutputSolver: Finished writing vtu file
VtuOutputSolver: All done for now
ResultOutputSolver: -------------------------------------
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 6/20   3.01000000000000
MAIN: Estimated time left:  1.1 minutes
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   1.499999999765578E-005
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  152.61431     0.75225337E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.27    0.27
FlowSolve:  Result Norm     :    152.614314139240
FlowSolve:  Relative Change :   7.522533658208264E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  153.14737     0.34867617E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.27    0.54
FlowSolve:  Result Norm     :    153.147373213003
FlowSolve:  Relative Change :   3.486761722036206E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  153.43955     0.19059645E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.81
FlowSolve:  Result Norm     :    153.439545102570
FlowSolve:  Relative Change :   1.905964489105795E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  153.60544     0.10805665E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.27
FlowSolve: iter:    4 Solve:    (s)    0.27    1.08
FlowSolve:  Result Norm     :    153.605436363580
FlowSolve:  Relative Change :   1.080566503435207E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  153.70072     0.62009120E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.36
FlowSolve:  Result Norm     :    153.700715284124
FlowSolve:  Relative Change :   6.200912024243977E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  153.75572     0.35778144E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.28    1.64
FlowSolve:  Result Norm     :    153.755716386151
FlowSolve:  Relative Change :   3.577814373778951E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  153.78757     0.20713533E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.46
FlowSolve: iter:    7 Solve:    (s)    0.27    1.91
FlowSolve:  Result Norm     :    153.787567926593
FlowSolve:  Relative Change :   2.071353338993931E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  153.80606     0.12026445E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.17
FlowSolve:  Result Norm     :    153.806064216092
FlowSolve:  Relative Change :   1.202644500138389E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  153.81684     0.70030653E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.60
FlowSolve: iter:    9 Solve:    (s)    0.27    2.45
FlowSolve:  Result Norm     :    153.816835732404
FlowSolve:  Relative Change :   7.003065320351865E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  153.82313     0.40909815E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.66
FlowSolve: iter:   10 Solve:    (s)    0.27    2.71
FlowSolve:  Result Norm     :    153.823128479487
FlowSolve:  Relative Change :   4.090981547172970E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  153.82682     0.23983588E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.27    2.98
FlowSolve:  Result Norm     :    153.826817754261
FlowSolve:  Relative Change :   2.398358796296173E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  153.82899     0.14116117E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.06    0.79
FlowSolve: iter:   12 Solve:    (s)    0.27    3.25
FlowSolve:  Result Norm     :    153.828989206921
FlowSolve:  Relative Change :   1.411611684758468E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  153.83027     0.83441347E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.86
FlowSolve: iter:   13 Solve:    (s)    0.27    3.52
FlowSolve:  Result Norm     :    153.830272782081
FlowSolve:  Relative Change :   8.344134684813378E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   0.000000000000000E+000
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3232E-04
       2 0.9248E-05
       3 0.5719E-05
       4 0.1366E-05
       5 0.1351E-06
       5 0.1351E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   7.890000000010389E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  828.92541     0.28294767E-05 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.235999999998683E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   4.179999999998074E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.925408061182
FreeSurfaceSolver (zs):  Relative Change :   2.829476677510404E-006
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.168549E+04/ 0.116856E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after1 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3851E-04
       2 0.4698E-05
       3 0.1048E-05
       4 0.8876E-07
       4 0.8876E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.48903     0.19656345E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.489026782061
FreeSurfaceSolver (zb):  Relative Change :   1.965634514534627E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 13
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1240E-07
       1 0.1240E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.48903     0.35814765E-08 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.489027704252
FreeSurfaceSolver (zb):  Relative Change :   3.581476525903779E-009
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 15
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 7/20   3.51000000000000
MAIN: Estimated time left:  1.1 minutes
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   1.500000000120849E-005
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  154.86125     0.66796671E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.30    0.30
FlowSolve:  Result Norm     :    154.861251091158
FlowSolve:  Relative Change :   6.679667106769691E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  155.35417     0.31778929E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.08    0.14
FlowSolve: iter:    2 Solve:    (s)    0.27    0.57
FlowSolve:  Result Norm     :    155.354166782817
FlowSolve:  Relative Change :   3.177892930256500E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  155.63308     0.17937103E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.21
FlowSolve: iter:    3 Solve:    (s)    0.27    0.84
FlowSolve:  Result Norm     :    155.633077286948
FlowSolve:  Relative Change :   1.793710253073212E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  155.79650     0.10494731E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.28
FlowSolve: iter:    4 Solve:    (s)    0.27    1.11
FlowSolve:  Result Norm     :    155.796495770178
FlowSolve:  Relative Change :   1.049473122447508E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  155.89322     0.62061800E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.34
FlowSolve: iter:    5 Solve:    (s)    0.28    1.39
FlowSolve:  Result Norm     :    155.893215893058
FlowSolve:  Relative Change :   6.206180009228440E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  155.95071     0.36870995E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.41
FlowSolve: iter:    6 Solve:    (s)    0.27    1.66
FlowSolve:  Result Norm     :    155.950705871852
FlowSolve:  Relative Change :   3.687099525172744E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  155.98498     0.21975544E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.47
FlowSolve: iter:    7 Solve:    (s)    0.27    1.93
FlowSolve:  Result Norm     :    155.984980653633
FlowSolve:  Relative Change :   2.197554384551456E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  156.00548     0.13137848E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.54
FlowSolve: iter:    8 Solve:    (s)    0.27    2.21
FlowSolve:  Result Norm     :    156.005475069125
FlowSolve:  Relative Change :   1.313784772346112E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  156.01777     0.78801778E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.06    0.60
FlowSolve: iter:    9 Solve:    (s)    0.28    2.49
FlowSolve:  Result Norm     :    156.017769062410
FlowSolve:  Relative Change :   7.880177849436054E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  156.02517     0.47436553E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.67
FlowSolve: iter:   10 Solve:    (s)    0.27    2.76
FlowSolve:  Result Norm     :    156.025170183138
FlowSolve:  Relative Change :   4.743655310201515E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  156.02964     0.28667473E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.74
FlowSolve: iter:   11 Solve:    (s)    0.27    3.03
FlowSolve:  Result Norm     :    156.029643094638
FlowSolve:  Relative Change :   2.866747320945335E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  156.03236     0.17397163E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.80
FlowSolve: iter:   12 Solve:    (s)    0.27    3.30
FlowSolve:  Result Norm     :    156.032357591434
FlowSolve:  Relative Change :   1.739716332078794E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  156.03401     0.10603918E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.87
FlowSolve: iter:   13 Solve:    (s)    0.28    3.58
FlowSolve:  Result Norm     :    156.034012154575
FlowSolve:  Relative Change :   1.060391827596921E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  156.03503     0.64923389E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.93
FlowSolve: iter:   14 Solve:    (s)    0.28    3.85
FlowSolve:  Result Norm     :    156.035025183555
FlowSolve:  Relative Change :   6.492338928114672E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   3.200000000092018E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.2975E-04
       2 0.9138E-05
       3 0.3938E-05
       4 0.1600E-05
       5 0.1108E-06
       5 0.1108E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   9.249999999987324E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  828.92972     0.51959206E-05 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.297000000000992E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.720000000022594E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.929715103008
FreeSurfaceSolver (zs):  Relative Change :   5.195920640057448E-006
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.168443E+04/ 0.116881E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after1 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3850E-04
       2 0.4701E-05
       3 0.9695E-06
       3 0.9695E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.54059     0.20024843E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.540594640992
FreeSurfaceSolver (zb):  Relative Change :   2.002484303887147E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 13
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1593E-06
       1 0.1593E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.54060     0.28462320E-07 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.540601971194
FreeSurfaceSolver (zb):  Relative Change :   2.846232010003202E-008
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 15
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: result output
ResultOutputSolver: -------------------------------------
ResultOutputSolve: Number of output meshes: 1
ResultOutputSolver: Working on mesh: Mesh
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
VtuOutputSolver: Full filename base is: ./Mesh/Forward5KM10L
VtuOutputSolver: Number of active elements 326 out of 326
VtuOutputSolver: Number of geometry nodes 340 out of 340
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the pvtu file: ./Mesh/Forward5KM10L0004.pvtu
WritePvtuFile: Number of active partitions is 20 (out of 20)
WritePvtuFile: List of active partitions was composed
VtuOutputSolver: Finished writing pvtu file
VtuOutputSolver: Writing the vtu file: ./Mesh/Forward5KM10L0001par0004.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
AscBinWriteInit: Writing in binary
AscBinWriteInit: Writing in double precision
AscBinWriteInit: Writing to unit number: 58
AscBinWriteInit: Size of buffer is: 340
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Number of nodal fields written: 19
VtuOutputSolver: Writing elemental fields
VtuOutputSolver: Number of elemental fields written: 0
VtuOutputSolver: Writing entity IDs for bodies and boundaries
VtuOutputSolver: Writing coordinates for each used node
VtuOutputSolver: Writing the elemental connectivity data
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Writing elemental fields
AscBinWriteInit: Terminating buffered ascii/binary writing
VtuOutputSolver: Finished writing vtu file
VtuOutputSolver: All done for now
ResultOutputSolver: -------------------------------------
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 8/20   4.01000000000000
MAIN: Estimated time left:  1.1 minutes
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   1.699999999971169E-005
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  156.96873     0.59660804E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.27    0.27
FlowSolve:  Result Norm     :    156.968727959256
FlowSolve:  Relative Change :   5.966080382911181E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  157.42480     0.29012800E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.26    0.54
FlowSolve:  Result Norm     :    157.424799783835
FlowSolve:  Relative Change :   2.901279984056495E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  157.68940     0.16793758E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.81
FlowSolve:  Result Norm     :    157.689397368597
FlowSolve:  Relative Change :   1.679375839950453E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  157.84817     0.10063590E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.26
FlowSolve: iter:    4 Solve:    (s)    0.27    1.08
FlowSolve:  Result Norm     :    157.848169409912
FlowSolve:  Relative Change :   1.006359039506379E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  157.94425     0.60848969E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.34
FlowSolve:  Result Norm     :    157.944247624917
FlowSolve:  Relative Change :   6.084896901993344E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  158.00257     0.36920185E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.27    1.62
FlowSolve:  Result Norm     :    158.002571700593
FlowSolve:  Relative Change :   3.692018536565001E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  158.03806     0.22457218E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.46
FlowSolve: iter:    7 Solve:    (s)    0.28    1.89
FlowSolve:  Result Norm     :    158.038058666878
FlowSolve:  Relative Change :   2.245721775996084E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  158.05970     0.13694894E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.16
FlowSolve:  Result Norm     :    158.059703293510
FlowSolve:  Relative Change :   1.369489394492037E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  158.07294     0.83753284E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.59
FlowSolve: iter:    9 Solve:    (s)    0.27    2.43
FlowSolve:  Result Norm     :    158.072941867161
FlowSolve:  Relative Change :   8.375328428560780E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  158.08106     0.51383437E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.66
FlowSolve: iter:   10 Solve:    (s)    0.28    2.71
FlowSolve:  Result Norm     :    158.081064406967
FlowSolve:  Relative Change :   5.138343746990652E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  158.08607     0.31632631E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.27    2.99
FlowSolve:  Result Norm     :    158.086065006014
FlowSolve:  Relative Change :   3.163263085774436E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  158.08915     0.19544240E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.79
FlowSolve: iter:   12 Solve:    (s)    0.27    3.26
FlowSolve:  Result Norm     :    158.089154708136
FlowSolve:  Relative Change :   1.954423958184987E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  158.09107     0.12120838E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.86
FlowSolve: iter:   13 Solve:    (s)    0.28    3.53
FlowSolve:  Result Norm     :    158.091070892758
FlowSolve:  Relative Change :   1.212083784253824E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  158.09226     0.75456085E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.93
FlowSolve: iter:   14 Solve:    (s)    0.28    3.81
FlowSolve:  Result Norm     :    158.092263790582
FlowSolve:  Relative Change :   7.545608468177334E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   2.800000000036107E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.2753E-04
       2 0.9279E-05
       3 0.2987E-05
       4 0.2004E-05
       5 0.9319E-07
       5 0.9319E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   8.230000000040150E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  828.93556     0.70559361E-05 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.215000000001965E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.919999999979495E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.935563998759
FreeSurfaceSolver (zs):  Relative Change :   7.055936118246855E-006
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.168345E+04/ 0.116906E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after1 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3852E-04
       2 0.4711E-05
       3 0.9078E-06
       3 0.9078E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.59303     0.20353966E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.593027033054
FreeSurfaceSolver (zb):  Relative Change :   2.035396600342941E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 10
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1488E-06
       1 0.1488E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.59303     0.25604387E-07 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.593033628566
FreeSurfaceSolver (zb):  Relative Change :   2.560438726969417E-008
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 14
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 9/20   4.51000000000000
MAIN: Estimated time left:  1.0 minutes
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   0.000000000000000E+000
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  158.94212     0.53613135E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.27    0.27
FlowSolve:  Result Norm     :    158.942124163244
FlowSolve:  Relative Change :   5.361313503860549E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  159.36493     0.26565656E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.28    0.55
FlowSolve:  Result Norm     :    159.364925950360
FlowSolve:  Relative Change :   2.656565646065698E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  159.61518     0.15690972E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.82
FlowSolve:  Result Norm     :    159.615181351848
FlowSolve:  Relative Change :   1.569097230573205E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  159.76817     0.95799542E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.26
FlowSolve: iter:    4 Solve:    (s)    0.27    1.09
FlowSolve:  Result Norm     :    159.768165243239
FlowSolve:  Relative Change :   9.579954184923270E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  159.86233     0.58920059E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.36
FlowSolve:  Result Norm     :    159.862328480392
FlowSolve:  Relative Change :   5.892005863176456E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  159.92041     0.36322556E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.28    1.64
FlowSolve:  Result Norm     :    159.920405111677
FlowSolve:  Relative Change :   3.632255602595872E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  159.95628     0.22429255E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.46
FlowSolve: iter:    7 Solve:    (s)    0.27    1.91
FlowSolve:  Result Norm     :    159.956278089612
FlowSolve:  Relative Change :   2.242925465887302E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  159.97848     0.13876399E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.18
FlowSolve:  Result Norm     :    159.978475801758
FlowSolve:  Relative Change :   1.387639940718503E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  159.99224     0.86044222E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.59
FlowSolve: iter:    9 Solve:    (s)    0.28    2.46
FlowSolve:  Result Norm     :    159.992241617554
FlowSolve:  Relative Change :   8.604422246335610E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  160.00080     0.53492217E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.66
FlowSolve: iter:   10 Solve:    (s)    0.27    2.73
FlowSolve:  Result Norm     :    160.000800186206
FlowSolve:  Relative Change :   5.349221722746502E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  160.00614     0.33350103E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.27    3.00
FlowSolve:  Result Norm     :    160.006136318316
FlowSolve:  Relative Change :   3.335010277421196E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  160.00947     0.20855165E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.79
FlowSolve: iter:   12 Solve:    (s)    0.28    3.28
FlowSolve:  Result Norm     :    160.009473307487
FlowSolve:  Relative Change :   2.085516500214316E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  160.01157     0.13082124E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.86
FlowSolve: iter:   13 Solve:    (s)    0.27    3.55
FlowSolve:  Result Norm     :    160.011566584877
FlowSolve:  Relative Change :   1.308212354460445E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  160.01288     0.82322220E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.93
FlowSolve: iter:   14 Solve:    (s)    0.28    3.82
FlowSolve:  Result Norm     :    160.012883841038
FlowSolve:  Relative Change :   8.232221998007745E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   2.900000000494174E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.2559E-04
       2 0.9810E-05
       3 0.2428E-05
       4 0.2934E-05
       5 0.8031E-07
       5 0.8031E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   7.730000000023551E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  828.94265     0.85482860E-05 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.151000000000124E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.489999999999327E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.942650007291
FreeSurfaceSolver (zs):  Relative Change :   8.548285962493157E-006
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.168254E+04/ 0.116930E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after1 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3856E-04
       2 0.4726E-05
       3 0.8598E-06
       3 0.8598E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.64622     0.20645325E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.646220036769
FreeSurfaceSolver (zb):  Relative Change :   2.064532460381777E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 14
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1344E-06
       1 0.1344E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.64623     0.22633875E-07 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.646225868301
FreeSurfaceSolver (zb):  Relative Change :   2.263387522403916E-008
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 15
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: result output
ResultOutputSolver: -------------------------------------
ResultOutputSolve: Number of output meshes: 1
ResultOutputSolver: Working on mesh: Mesh
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
VtuOutputSolver: Full filename base is: ./Mesh/Forward5KM10L
VtuOutputSolver: Number of active elements 326 out of 326
VtuOutputSolver: Number of geometry nodes 340 out of 340
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the pvtu file: ./Mesh/Forward5KM10L0005.pvtu
WritePvtuFile: Number of active partitions is 20 (out of 20)
WritePvtuFile: List of active partitions was composed
VtuOutputSolver: Finished writing pvtu file
VtuOutputSolver: Writing the vtu file: ./Mesh/Forward5KM10L0001par0005.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
AscBinWriteInit: Writing in binary
AscBinWriteInit: Writing in double precision
AscBinWriteInit: Writing to unit number: 58
AscBinWriteInit: Size of buffer is: 340
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Number of nodal fields written: 19
VtuOutputSolver: Writing elemental fields
VtuOutputSolver: Number of elemental fields written: 0
VtuOutputSolver: Writing entity IDs for bodies and boundaries
VtuOutputSolver: Writing coordinates for each used node
VtuOutputSolver: Writing the elemental connectivity data
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Writing elemental fields
AscBinWriteInit: Terminating buffered ascii/binary writing
VtuOutputSolver: Finished writing vtu file
VtuOutputSolver: All done for now
ResultOutputSolver: -------------------------------------
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 10/20   5.01000000000000
MAIN: Estimated time left: 55.8 seconds
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   1.499999999765578E-005
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  160.78962     0.48424826E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.27    0.27
FlowSolve:  Result Norm     :    160.789624116051
FlowSolve:  Relative Change :   4.842482560124114E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  161.18220     0.24385535E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.28    0.55
FlowSolve:  Result Norm     :    161.182196867906
FlowSolve:  Relative Change :   2.438553477476901E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  161.41838     0.14642180E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.82
FlowSolve:  Result Norm     :    161.418375657060
FlowSolve:  Relative Change :   1.464218040936621E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  161.56492     0.90741424E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.27
FlowSolve: iter:    4 Solve:    (s)    0.27    1.10
FlowSolve:  Result Norm     :    161.564915476615
FlowSolve:  Relative Change :   9.074142444991724E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  161.65633     0.56565648E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.36
FlowSolve:  Result Norm     :    161.656331572500
FlowSolve:  Relative Change :   5.656564766080792E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  161.71342     0.35306705E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.27    1.64
FlowSolve:  Result Norm     :    161.713417174672
FlowSolve:  Relative Change :   3.530670533876553E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  161.74909     0.22056920E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.47
FlowSolve: iter:    7 Solve:    (s)    0.27    1.91
FlowSolve:  Result Norm     :    161.749090108587
FlowSolve:  Relative Change :   2.205692042263877E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  161.77141     0.13796626E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.18
FlowSolve:  Result Norm     :    161.771407564991
FlowSolve:  Relative Change :   1.379662591105689E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  161.78539     0.86442360E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.60
FlowSolve: iter:    9 Solve:    (s)    0.27    2.46
FlowSolve:  Result Norm     :    161.785392071704
FlowSolve:  Relative Change :   8.644236021949170E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  161.79417     0.54270387E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.66
FlowSolve: iter:   10 Solve:    (s)    0.27    2.73
FlowSolve:  Result Norm     :    161.794172465722
FlowSolve:  Relative Change :   5.427038651124514E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  161.79970     0.34150490E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.28    3.01
FlowSolve:  Result Norm     :    161.799697910269
FlowSolve:  Relative Change :   3.415048956950610E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  161.80318     0.21543074E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.80
FlowSolve: iter:   12 Solve:    (s)    0.28    3.29
FlowSolve:  Result Norm     :    161.803183610709
FlowSolve:  Relative Change :   2.154307417578526E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  161.80539     0.13625125E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.86
FlowSolve: iter:   13 Solve:    (s)    0.27    3.56
FlowSolve:  Result Norm     :    161.805388214293
FlowSolve:  Relative Change :   1.362512477130747E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  161.80679     0.86398504E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.93
FlowSolve: iter:   14 Solve:    (s)    0.28    3.84
FlowSolve:  Result Norm     :    161.806786194675
FlowSolve:  Relative Change :   8.639850366080023E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   2.800000000036107E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.2391E-04
       2 0.1109E-04
       3 0.2077E-05
       4 0.7119E-05
       5 0.7049E-07
       5 0.7049E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   8.339999999975589E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  828.95074     0.97641830E-05 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.235000000001207E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   4.010000000036484E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.950743994553
FreeSurfaceSolver (zs):  Relative Change :   9.764183018365422E-006
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.168168E+04/ 0.116955E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after1 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3862E-04
       2 0.4744E-05
       3 0.8236E-06
       3 0.8236E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.70009     0.20902704E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.700086524583
FreeSurfaceSolver (zb):  Relative Change :   2.090270367195917E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 14
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1281E-06
       1 0.1281E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.70009     0.19774950E-07 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.700091620590
FreeSurfaceSolver (zb):  Relative Change :   1.977495016383261E-008
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 12
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 11/20   5.51000000000000
MAIN: Estimated time left: 50.4 seconds
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   1.499999999765578E-005
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  162.51941     0.43944801E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.28    0.28
FlowSolve:  Result Norm     :    162.519408704694
FlowSolve:  Relative Change :   4.394480132820230E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  162.88457     0.22443419E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.27    0.55
FlowSolve:  Result Norm     :    162.884567596651
FlowSolve:  Relative Change :   2.244341916821172E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  163.10723     0.13660763E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.28    0.82
FlowSolve:  Result Norm     :    163.107232433183
FlowSolve:  Relative Change :   1.366076303217607E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  163.24707     0.85697736E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.27
FlowSolve: iter:    4 Solve:    (s)    0.27    1.09
FlowSolve:  Result Norm     :    163.247071557921
FlowSolve:  Relative Change :   8.569773588283062E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  163.33526     0.54006764E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.37
FlowSolve:  Result Norm     :    163.335259832913
FlowSolve:  Relative Change :   5.400676430730774E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  163.39088     0.34047019E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.28    1.64
FlowSolve:  Result Norm     :    163.390880088435
FlowSolve:  Relative Change :   3.404701903277091E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  163.42596     0.21467548E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.46
FlowSolve: iter:    7 Solve:    (s)    0.27    1.92
FlowSolve:  Result Norm     :    163.425959869554
FlowSolve:  Relative Change :   2.146754807602585E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  163.44810     0.13544597E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.18
FlowSolve:  Result Norm     :    163.448096756656
FlowSolve:  Relative Change :   1.354459716400006E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  163.46208     0.85554444E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.60
FlowSolve: iter:    9 Solve:    (s)    0.27    2.45
FlowSolve:  Result Norm     :    163.462081065860
FlowSolve:  Relative Change :   8.555444371405266E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  163.47093     0.54123347E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.06    0.66
FlowSolve: iter:   10 Solve:    (s)    0.28    2.73
FlowSolve:  Result Norm     :    163.470928420164
FlowSolve:  Relative Change :   5.412334665995935E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  163.47654     0.34302106E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.28    3.01
FlowSolve:  Result Norm     :    163.476535913513
FlowSolve:  Relative Change :   3.430210637208126E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  163.48010     0.21783740E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.79
FlowSolve: iter:   12 Solve:    (s)    0.27    3.28
FlowSolve:  Result Norm     :    163.480097082679
FlowSolve:  Relative Change :   2.178374014020357E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  163.48236     0.13863757E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.86
FlowSolve: iter:   13 Solve:    (s)    0.27    3.55
FlowSolve:  Result Norm     :    163.482363546734
FlowSolve:  Relative Change :   1.386375702635328E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  163.48381     0.88426245E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.06    0.93
FlowSolve: iter:   14 Solve:    (s)    0.27    3.82
FlowSolve:  Result Norm     :    163.483809166278
FlowSolve:  Relative Change :   8.842624492449626E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   2.800000000036107E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.2243E-04
       2 0.1432E-04
       3 0.1842E-05
       4 0.9425E-05
       5 0.6268E-07
       5 0.6268E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   7.909999999995421E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  828.95967     0.10767726E-04 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.184999999999548E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.659999999996444E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.959669957319
FreeSurfaceSolver (zs):  Relative Change :   1.076772627860718E-005
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.168088E+04/ 0.116979E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1339E-07
       1 0.1339E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   0.000000000000000E+000
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  828.95967     0.16539552E-08 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   0.000000000000000E+000
Dirichlet:  Additional time spent in DirichletReduction (CPU):   0.000000000000000E+000
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.959671328381
FreeSurfaceSolver (zs):  Relative Change :   1.653955161643830E-009
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.168088E+04/ 0.116979E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3868E-04
       2 0.4764E-05
       3 0.7967E-06
       3 0.7967E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.75455     0.21129610E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.754548398340
FreeSurfaceSolver (zb):  Relative Change :   2.112961006569749E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 12
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1214E-06
       1 0.1214E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.75455     0.17172054E-07 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.754552824515
FreeSurfaceSolver (zb):  Relative Change :   1.717205418676184E-008
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 12
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: result output
ResultOutputSolver: -------------------------------------
ResultOutputSolve: Number of output meshes: 1
ResultOutputSolver: Working on mesh: Mesh
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
VtuOutputSolver: Full filename base is: ./Mesh/Forward5KM10L
VtuOutputSolver: Number of active elements 326 out of 326
VtuOutputSolver: Number of geometry nodes 340 out of 340
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the pvtu file: ./Mesh/Forward5KM10L0006.pvtu
WritePvtuFile: Number of active partitions is 20 (out of 20)
WritePvtuFile: List of active partitions was composed
VtuOutputSolver: Finished writing pvtu file
VtuOutputSolver: Writing the vtu file: ./Mesh/Forward5KM10L0001par0006.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
AscBinWriteInit: Writing in binary
AscBinWriteInit: Writing in double precision
AscBinWriteInit: Writing to unit number: 58
AscBinWriteInit: Size of buffer is: 340
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Number of nodal fields written: 19
VtuOutputSolver: Writing elemental fields
VtuOutputSolver: Number of elemental fields written: 0
VtuOutputSolver: Writing entity IDs for bodies and boundaries
VtuOutputSolver: Writing coordinates for each used node
VtuOutputSolver: Writing the elemental connectivity data
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Writing elemental fields
AscBinWriteInit: Terminating buffered ascii/binary writing
VtuOutputSolver: Finished writing vtu file
VtuOutputSolver: All done for now
ResultOutputSolver: -------------------------------------
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 12/20   6.01000000000000
MAIN: Estimated time left: 45.7 seconds
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   2.000000000634827E-005
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  164.13991     0.40052134E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.28    0.28
FlowSolve:  Result Norm     :    164.139910629869
FlowSolve:  Relative Change :   4.005213444249361E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  164.48023     0.20711744E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.27    0.55
FlowSolve:  Result Norm     :    164.480225428730
FlowSolve:  Relative Change :   2.071174353118505E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  164.69010     0.12751816E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.82
FlowSolve:  Result Norm     :    164.690101405054
FlowSolve:  Relative Change :   1.275181626133430E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  164.82324     0.80810579E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.26
FlowSolve: iter:    4 Solve:    (s)    0.27    1.09
FlowSolve:  Result Norm     :    164.823242225352
FlowSolve:  Relative Change :   8.081057891729583E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  164.90796     0.51387299E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.36
FlowSolve:  Result Norm     :    164.907962205378
FlowSolve:  Relative Change :   5.138729904069553E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  164.96183     0.32661649E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.27    1.63
FlowSolve:  Result Norm     :    164.961832662780
FlowSolve:  Relative Change :   3.266164907460166E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  164.99607     0.20749927E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.46
FlowSolve: iter:    7 Solve:    (s)    0.27    1.91
FlowSolve:  Result Norm     :    164.996065673955
FlowSolve:  Relative Change :   2.074992679231136E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  165.01782     0.13183876E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.18
FlowSolve:  Result Norm     :    165.017819983929
FlowSolve:  Relative Change :   1.318387553974836E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  165.03165     0.83821812E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.59
FlowSolve: iter:    9 Solve:    (s)    0.27    2.45
FlowSolve:  Result Norm     :    165.031652656309
FlowSolve:  Relative Change :   8.382181173564881E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  165.04046     0.53351752E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.66
FlowSolve: iter:   10 Solve:    (s)    0.28    2.73
FlowSolve:  Result Norm     :    165.040457618986
FlowSolve:  Relative Change :   5.335175195247719E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  165.04607     0.34006250E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.28    3.01
FlowSolve:  Result Norm     :    165.046070121504
FlowSolve:  Relative Change :   3.400625015729698E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  165.04965     0.21711027E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.06    0.79
FlowSolve: iter:   12 Solve:    (s)    0.27    3.28
FlowSolve:  Result Norm     :    165.049653480163
FlowSolve:  Relative Change :   2.171102745842216E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  165.05195     0.13886061E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.86
FlowSolve: iter:   13 Solve:    (s)    0.27    3.55
FlowSolve:  Result Norm     :    165.051945385614
FlowSolve:  Relative Change :   1.388606088711198E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  165.05341     0.88978065E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.92
FlowSolve: iter:   14 Solve:    (s)    0.27    3.82
FlowSolve:  Result Norm     :    165.053413992425
FlowSolve:  Relative Change :   8.897806528962605E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   2.899999999783631E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.2113E-04
       2 0.2619E-04
       3 0.1675E-05
       4 0.2512E-05
       5 0.5632E-07
       5 0.5632E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   8.399999999966212E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  828.96929     0.11605871E-04 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.247999999996807E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   4.080000000001860E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.969292182838
FreeSurfaceSolver (zs):  Relative Change :   1.160587053939439E-005
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.168012E+04/ 0.117003E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1206E-07
       1 0.1206E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   5.230000000011614E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  828.96929     0.88110234E-09 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   8.499999999997954E-004
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.269999999986339E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.969292913245
FreeSurfaceSolver (zs):  Relative Change :   8.811023384506338E-010
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.168012E+04/ 0.117003E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3874E-04
       2 0.4785E-05
       3 0.7785E-06
       3 0.7785E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.80953     0.21328839E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.809534740784
FreeSurfaceSolver (zb):  Relative Change :   2.132883868172055E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 11
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1159E-06
       1 0.1159E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.80954     0.15029576E-07 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.809538615552
FreeSurfaceSolver (zb):  Relative Change :   1.502957600545259E-008
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 9
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 13/20   6.51000000000000
MAIN: Estimated time left: 40.3 seconds
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   0.000000000000000E+000
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  165.65959     0.36658908E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.28    0.28
FlowSolve:  Result Norm     :    165.659592880731
FlowSolve:  Relative Change :   3.665890822002142E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  165.97748     0.19170549E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.27    0.55
FlowSolve:  Result Norm     :    165.977476111216
FlowSolve:  Relative Change :   1.917054878402625E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  166.17541     0.11918446E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.82
FlowSolve:  Result Norm     :    166.175413420746
FlowSolve:  Relative Change :   1.191844573799581E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  166.30205     0.76177333E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.26
FlowSolve: iter:    4 Solve:    (s)    0.27    1.09
FlowSolve:  Result Norm     :    166.302049653284
FlowSolve:  Relative Change :   7.617733326421270E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  166.38324     0.48808210E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.06    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.37
FlowSolve:  Result Norm     :    166.383238520577
FlowSolve:  Relative Change :   4.880821014904954E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  166.43522     0.31235056E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.27    1.64
FlowSolve:  Result Norm     :    166.435216536538
FlowSolve:  Relative Change :   3.123505633241663E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  166.46845     0.19968463E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.46
FlowSolve: iter:    7 Solve:    (s)    0.27    1.91
FlowSolve:  Result Norm     :    166.468454409878
FlowSolve:  Relative Change :   1.996846309678995E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  166.48970     0.12761162E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.18
FlowSolve:  Result Norm     :    166.489699074324
FlowSolve:  Relative Change :   1.276116185995354E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  166.50328     0.81572619E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.59
FlowSolve: iter:    9 Solve:    (s)    0.27    2.45
FlowSolve:  Result Norm     :    166.503280629050
FlowSolve:  Relative Change :   8.157261896393859E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  166.51197     0.52181189E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.66
FlowSolve: iter:   10 Solve:    (s)    0.27    2.72
FlowSolve:  Result Norm     :    166.511969194970
FlowSolve:  Relative Change :   5.218118944747229E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  166.51753     0.33415768E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.28    2.99
FlowSolve:  Result Norm     :    166.517533413233
FlowSolve:  Relative Change :   3.341576779316416E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  166.52110     0.21427262E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.79
FlowSolve: iter:   12 Solve:    (s)    0.27    3.27
FlowSolve:  Result Norm     :    166.521101466357
FlowSolve:  Relative Change :   2.142726248301051E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  166.52339     0.13760217E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.86
FlowSolve: iter:   13 Solve:    (s)    0.27    3.53
FlowSolve:  Result Norm     :    166.523392848639
FlowSolve:  Relative Change :   1.376021715524731E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  166.52487     0.88505770E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.92
FlowSolve: iter:   14 Solve:    (s)    0.27    3.80
FlowSolve:  Result Norm     :    166.524866683272
FlowSolve:  Relative Change :   8.850577002789342E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   2.800000000036107E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0009 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1998E-04
       2 0.1522E-03
       3 0.1552E-05
       4 0.1370E-05
       5 0.5080E-07
       5 0.5080E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   8.330000000000837E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  828.97950     0.12311105E-04 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.204000000001315E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.340000000022769E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.979498503711
FreeSurfaceSolver (zs):  Relative Change :   1.231110456353148E-005
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167940E+04/ 0.117027E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1090E-07
       1 0.1090E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   4.410000000021341E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  828.97950     0.49865734E-09 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   8.410000000012019E-004
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.510000000019886E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.979498917088
FreeSurfaceSolver (zs):  Relative Change :   4.986573386707835E-010
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167940E+04/ 0.117027E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3879E-04
       2 0.4805E-05
       3 0.7638E-06
       3 0.7638E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.86498     0.21504074E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.864984131436
FreeSurfaceSolver (zb):  Relative Change :   2.150407415459997E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 9
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1158E-06
       1 0.1158E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.86499     0.13041318E-07 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.864987494336
FreeSurfaceSolver (zb):  Relative Change :   1.304131848476938E-008
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 11
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: result output
ResultOutputSolver: -------------------------------------
ResultOutputSolve: Number of output meshes: 1
ResultOutputSolver: Working on mesh: Mesh
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
VtuOutputSolver: Full filename base is: ./Mesh/Forward5KM10L
VtuOutputSolver: Number of active elements 326 out of 326
VtuOutputSolver: Number of geometry nodes 340 out of 340
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the pvtu file: ./Mesh/Forward5KM10L0007.pvtu
WritePvtuFile: Number of active partitions is 20 (out of 20)
WritePvtuFile: List of active partitions was composed
VtuOutputSolver: Finished writing pvtu file
VtuOutputSolver: Writing the vtu file: ./Mesh/Forward5KM10L0001par0007.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
AscBinWriteInit: Writing in binary
AscBinWriteInit: Writing in double precision
AscBinWriteInit: Writing to unit number: 58
AscBinWriteInit: Size of buffer is: 340
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Number of nodal fields written: 19
VtuOutputSolver: Writing elemental fields
VtuOutputSolver: Number of elemental fields written: 0
VtuOutputSolver: Writing entity IDs for bodies and boundaries
VtuOutputSolver: Writing coordinates for each used node
VtuOutputSolver: Writing the elemental connectivity data
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Writing elemental fields
AscBinWriteInit: Terminating buffered ascii/binary writing
VtuOutputSolver: Finished writing vtu file
VtuOutputSolver: All done for now
ResultOutputSolver: -------------------------------------
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 14/20   7.01000000000000
MAIN: Estimated time left: 35.5 seconds
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   1.999999999924285E-005
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  167.08672     0.33682804E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.27    0.27
FlowSolve:  Result Norm     :    167.086715366840
FlowSolve:  Relative Change :   3.368280442275566E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  167.38431     0.17794960E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.27    0.53
FlowSolve:  Result Norm     :    167.384310297566
FlowSolve:  Relative Change :   1.779496027404020E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  167.57116     0.11156635E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.81
FlowSolve:  Result Norm     :    167.571159089699
FlowSolve:  Relative Change :   1.115663478938398E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  167.69157     0.71831486E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.26
FlowSolve: iter:    4 Solve:    (s)    0.27    1.08
FlowSolve:  Result Norm     :    167.691571190459
FlowSolve:  Relative Change :   7.183148610588074E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  167.76927     0.46321167E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.28    1.36
FlowSolve:  Result Norm     :    167.769265877109
FlowSolve:  Relative Change :   4.632116662509638E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  167.81930     0.29816163E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.28    1.64
FlowSolve:  Result Norm     :    167.819295694137
FlowSolve:  Relative Change :   2.981616345556597E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  167.85146     0.19162935E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.46
FlowSolve: iter:    7 Solve:    (s)    0.27    1.91
FlowSolve:  Result Norm     :    167.851457878175
FlowSolve:  Relative Change :   1.916293492742233E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  167.87212     0.12306541E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.18
FlowSolve:  Result Norm     :    167.872115857214
FlowSolve:  Relative Change :   1.230654065092846E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  167.88538     0.79024671E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.60
FlowSolve: iter:    9 Solve:    (s)    0.27    2.45
FlowSolve:  Result Norm     :    167.885382420049
FlowSolve:  Relative Change :   7.902467050684299E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  167.89391     0.50764887E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.66
FlowSolve: iter:   10 Solve:    (s)    0.27    2.73
FlowSolve:  Result Norm     :    167.893905318924
FlowSolve:  Relative Change :   5.076488744552651E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  167.89938     0.32636687E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.28    3.00
FlowSolve:  Result Norm     :    167.899384909262
FlowSolve:  Relative Change :   3.263668749377539E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  167.90291     0.21004242E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.80
FlowSolve: iter:   12 Solve:    (s)    0.27    3.27
FlowSolve:  Result Norm     :    167.902911545606
FlowSolve:  Relative Change :   2.100424197241814E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  167.90518     0.13534547E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.86
FlowSolve: iter:   13 Solve:    (s)    0.27    3.55
FlowSolve:  Result Norm     :    167.905184050888
FlowSolve:  Relative Change :   1.353454732838679E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  167.90665     0.87330143E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.93
FlowSolve: iter:   14 Solve:    (s)    0.28    3.82
FlowSolve:  Result Norm     :    167.906650375656
FlowSolve:  Relative Change :   8.733014253686280E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   0.000000000000000E+000
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0009 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1896E-04
       2 0.1606E-04
       3 0.1462E-05
       4 0.9141E-06
       4 0.9141E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   7.499999999964757E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  828.99017     0.12869693E-04 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.162000000007879E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   4.120000000114032E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.990167697679
FreeSurfaceSolver (zs):  Relative Change :   1.286969334327322E-005
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167873E+04/ 0.117051E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1948E-06
       1 0.1948E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   4.269999999877427E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  828.99019     0.32264724E-07 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   7.370000000008758E-004
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.100000000131331E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    828.990194444818
FreeSurfaceSolver (zs):  Relative Change :   3.226472356650794E-008
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167870E+04/ 0.117051E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3884E-04
       2 0.4824E-05
       3 0.7532E-06
       3 0.7532E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.92084     0.21657457E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.920840540833
FreeSurfaceSolver (zb):  Relative Change :   2.165745682097111E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 12
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1114E-06
       1 0.1114E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.92084     0.11377996E-07 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.920843475456
FreeSurfaceSolver (zb):  Relative Change :   1.137799586236907E-008
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 13
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 15/20   7.51000000000000
MAIN: Estimated time left: 30.2 seconds
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   0.000000000000000E+000
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  168.42892     0.31056185E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.28    0.28
FlowSolve:  Result Norm     :    168.428915361614
FlowSolve:  Relative Change :   3.105618549812090E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  168.70811     0.16562902E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.27    0.55
FlowSolve:  Result Norm     :    168.708113734441
FlowSolve:  Relative Change :   1.656290165313868E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  168.88469     0.10460960E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.82
FlowSolve:  Result Norm     :    168.884690967736
FlowSolve:  Relative Change :   1.046095952493903E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  168.99920     0.67781939E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.27
FlowSolve: iter:    4 Solve:    (s)    0.26    1.08
FlowSolve:  Result Norm     :    168.999203094687
FlowSolve:  Relative Change :   6.778193868512973E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  169.07350     0.43954571E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.35
FlowSolve:  Result Norm     :    169.073502298268
FlowSolve:  Relative Change :   4.395457095221309E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  169.12159     0.28435266E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.28    1.62
FlowSolve:  Result Norm     :    169.121585634231
FlowSolve:  Relative Change :   2.843526572652956E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  169.15264     0.18359358E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.46
FlowSolve: iter:    7 Solve:    (s)    0.28    1.90
FlowSolve:  Result Norm     :    169.152638121607
FlowSolve:  Relative Change :   1.835935770160504E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  169.17267     0.11840312E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.17
FlowSolve:  Result Norm     :    169.172667507049
FlowSolve:  Relative Change :   1.184031174063482E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  169.18558     0.76327866E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.60
FlowSolve: iter:    9 Solve:    (s)    0.27    2.44
FlowSolve:  Result Norm     :    169.185580588614
FlowSolve:  Relative Change :   7.632786632213147E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  169.19391     0.49210411E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.66
FlowSolve: iter:   10 Solve:    (s)    0.28    2.72
FlowSolve:  Result Norm     :    169.193906485382
FlowSolve:  Relative Change :   4.921041071293409E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  169.19928     0.31743757E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.27    2.99
FlowSolve:  Result Norm     :    169.199277420917
FlowSolve:  Relative Change :   3.174375720934310E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  169.20274     0.20493687E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.80
FlowSolve: iter:   12 Solve:    (s)    0.27    3.26
FlowSolve:  Result Norm     :    169.202744973552
FlowSolve:  Relative Change :   2.049368741677115E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  169.20499     0.13244056E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.86
FlowSolve: iter:   13 Solve:    (s)    0.28    3.54
FlowSolve:  Result Norm     :    169.204985919030
FlowSolve:  Relative Change :   1.324405605178624E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  169.20644     0.85689366E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.93
FlowSolve: iter:   14 Solve:    (s)    0.28    3.82
FlowSolve:  Result Norm     :    169.206435832042
FlowSolve:  Relative Change :   8.568936618001441E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   2.899999999783631E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0009 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1805E-04
       2 0.8200E-05
       3 0.1407E-05
       4 0.6741E-06
       4 0.6741E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   7.569999999930133E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  829.00130     0.13398284E-04 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.158000000003767E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   4.010000000107539E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    829.001301565278
FreeSurfaceSolver (zs):  Relative Change :   1.339828399235211E-005
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167806E+04/ 0.117074E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1430E-06
       1 0.1430E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   5.060000000014497E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  829.00132     0.19684145E-07 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   8.290000000101827E-004
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.230000000087330E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    829.001317883460
FreeSurfaceSolver (zs):  Relative Change :   1.968414531535303E-008
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167805E+04/ 0.117074E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3887E-04
       2 0.4841E-05
       3 0.7448E-06
       3 0.7448E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  257.97705     0.21790781E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.977052565906
FreeSurfaceSolver (zb):  Relative Change :   2.179078103696920E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 12
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1074E-06
       1 0.1074E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  257.97706     0.99271786E-08 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    257.977055126890
FreeSurfaceSolver (zb):  Relative Change :   9.927178587780527E-009
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 13
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: result output
ResultOutputSolver: -------------------------------------
ResultOutputSolve: Number of output meshes: 1
ResultOutputSolver: Working on mesh: Mesh
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
VtuOutputSolver: Full filename base is: ./Mesh/Forward5KM10L
VtuOutputSolver: Number of active elements 326 out of 326
VtuOutputSolver: Number of geometry nodes 340 out of 340
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the pvtu file: ./Mesh/Forward5KM10L0008.pvtu
WritePvtuFile: Number of active partitions is 20 (out of 20)
WritePvtuFile: List of active partitions was composed
VtuOutputSolver: Finished writing pvtu file
VtuOutputSolver: Writing the vtu file: ./Mesh/Forward5KM10L0001par0008.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
AscBinWriteInit: Writing in binary
AscBinWriteInit: Writing in double precision
AscBinWriteInit: Writing to unit number: 58
AscBinWriteInit: Size of buffer is: 340
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Number of nodal fields written: 19
VtuOutputSolver: Writing elemental fields
VtuOutputSolver: Number of elemental fields written: 0
VtuOutputSolver: Writing entity IDs for bodies and boundaries
VtuOutputSolver: Writing coordinates for each used node
VtuOutputSolver: Writing the elemental connectivity data
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Writing elemental fields
AscBinWriteInit: Terminating buffered ascii/binary writing
VtuOutputSolver: Finished writing vtu file
VtuOutputSolver: All done for now
ResultOutputSolver: -------------------------------------
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 16/20   8.01000000000000
MAIN: Estimated time left: 25.3 seconds
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   1.900000000887303E-005
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  169.69367     0.28753579E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.27    0.27
FlowSolve:  Result Norm     :    169.693665373499
FlowSolve:  Relative Change :   2.875357898827837E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  169.95642     0.15472344E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.27    0.54
FlowSolve:  Result Norm     :    169.956424517296
FlowSolve:  Relative Change :   1.547234354515079E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  170.12366     0.98352330E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.81
FlowSolve:  Result Norm     :    170.123662861605
FlowSolve:  Relative Change :   9.835232965143071E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  170.23271     0.64077792E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.26
FlowSolve: iter:    4 Solve:    (s)    0.27    1.07
FlowSolve:  Result Norm     :    170.232709285182
FlowSolve:  Relative Change :   6.407779169187865E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  170.30380     0.41753125E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.28    1.35
FlowSolve:  Result Norm     :    170.303801603347
FlowSolve:  Relative Change :   4.175312537245900E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  170.35001     0.27128453E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.27    1.62
FlowSolve:  Result Norm     :    170.350008657080
FlowSolve:  Relative Change :   2.712845260592157E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  170.37997     0.17585075E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.46
FlowSolve: iter:    7 Solve:    (s)    0.27    1.89
FlowSolve:  Result Norm     :    170.379967467898
FlowSolve:  Relative Change :   1.758507493721217E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  170.39936     0.11382392E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.16
FlowSolve:  Result Norm     :    170.399361887593
FlowSolve:  Relative Change :   1.138239207886679E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  170.41191     0.73624025E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.60
FlowSolve: iter:    9 Solve:    (s)    0.27    2.43
FlowSolve:  Result Norm     :    170.411907836288
FlowSolve:  Relative Change :   7.362402484543980E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  170.42002     0.47616162E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.66
FlowSolve: iter:   10 Solve:    (s)    0.27    2.70
FlowSolve:  Result Norm     :    170.420022390476
FlowSolve:  Relative Change :   4.761616191843112E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  170.42527     0.30805245E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.27    2.97
FlowSolve:  Result Norm     :    170.425272301953
FlowSolve:  Relative Change :   3.080524541749052E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  170.42867     0.19941897E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.80
FlowSolve: iter:   12 Solve:    (s)    0.28    3.25
FlowSolve:  Result Norm     :    170.428670939039
FlowSolve:  Relative Change :   1.994189683879747E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  170.43087     0.12920174E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.86
FlowSolve: iter:   13 Solve:    (s)    0.26    3.51
FlowSolve:  Result Norm     :    170.430872921359
FlowSolve:  Relative Change :   1.292017407039713E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  170.43230     0.83791128E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.93
FlowSolve: iter:   14 Solve:    (s)    0.28    3.79
FlowSolve:  Result Norm     :    170.432300986848
FlowSolve:  Relative Change :   8.379112781371338E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   2.899999999783631E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1724E-04
       2 0.5664E-05
       3 0.1400E-05
       4 0.5309E-06
       4 0.5309E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   7.559999999955380E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  829.01279     0.13843659E-04 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.133999999993307E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.399999999942338E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    829.012794374398
FreeSurfaceSolver (zs):  Relative Change :   1.384365893203341E-005
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167742E+04/ 0.117098E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1126E-06
       1 0.1126E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   5.040000000064992E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  829.01281     0.14042293E-07 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   8.409999999940965E-004
Dirichlet:  Additional time spent in DirichletReduction (CPU):   2.949999999941610E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    829.012806015638
FreeSurfaceSolver (zs):  Relative Change :   1.404229278429644E-008
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167742E+04/ 0.117098E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3890E-04
       2 0.4855E-05
       3 0.7372E-06
       3 0.7372E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  258.03358     0.21907752E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    258.033578290903
FreeSurfaceSolver (zb):  Relative Change :   2.190775164406633E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 7
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1062E-06
       1 0.1062E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  258.03358     0.85502749E-08 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    258.033580497161
FreeSurfaceSolver (zb):  Relative Change :   8.550274932319595E-009
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 7
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 17/20   8.51000000000000
MAIN: Estimated time left: 20.2 seconds
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   0.000000000000000E+000
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  170.88801     0.26702521E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.26    0.26
FlowSolve:  Result Norm     :    170.888006629020
FlowSolve:  Relative Change :   2.670252147344173E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  171.13581     0.14490507E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.27    0.53
FlowSolve:  Result Norm     :    171.135811549852
FlowSolve:  Relative Change :   1.449050666424365E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  171.29443     0.92642876E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.81
FlowSolve:  Result Norm     :    171.294430162614
FlowSolve:  Relative Change :   9.264287638194671E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  171.39836     0.60652822E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.26
FlowSolve: iter:    4 Solve:    (s)    0.27    1.08
FlowSolve:  Result Norm     :    171.398356584887
FlowSolve:  Relative Change :   6.065282158943118E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  171.46640     0.39690713E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.35
FlowSolve:  Result Norm     :    171.466399317479
FlowSolve:  Relative Change :   3.969071269116274E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  171.51079     0.25887724E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.39
FlowSolve: iter:    6 Solve:    (s)    0.27    1.62
FlowSolve:  Result Norm     :    171.510793812694
FlowSolve:  Relative Change :   2.588772437585335E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  171.53968     0.16839746E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.06    0.46
FlowSolve: iter:    7 Solve:    (s)    0.27    1.89
FlowSolve:  Result Norm     :    171.539678227524
FlowSolve:  Relative Change :   1.683974644175379E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  171.55844     0.10935168E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.52
FlowSolve: iter:    8 Solve:    (s)    0.27    2.16
FlowSolve:  Result Norm     :    171.558437404528
FlowSolve:  Relative Change :   1.093516760927398E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  171.57061     0.70942924E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.59
FlowSolve: iter:    9 Solve:    (s)    0.27    2.44
FlowSolve:  Result Norm     :    171.570608693449
FlowSolve:  Relative Change :   7.094292400985080E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  171.57850     0.46009613E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.66
FlowSolve: iter:   10 Solve:    (s)    0.27    2.71
FlowSolve:  Result Norm     :    171.578502772350
FlowSolve:  Relative Change :   4.600961294315754E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  171.58362     0.29842972E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.72
FlowSolve: iter:   11 Solve:    (s)    0.27    2.98
FlowSolve:  Result Norm     :    171.583623261126
FlowSolve:  Relative Change :   2.984297151653029E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  171.58695     0.19365489E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.79
FlowSolve: iter:   12 Solve:    (s)    0.27    3.26
FlowSolve:  Result Norm     :    171.586946094087
FlowSolve:  Relative Change :   1.936548910418046E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  171.58910     0.12574915E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.85
FlowSolve: iter:   13 Solve:    (s)    0.27    3.53
FlowSolve:  Result Norm     :    171.589103798998
FlowSolve:  Relative Change :   1.257491547943005E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  171.59051     0.81723276E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.92
FlowSolve: iter:   14 Solve:    (s)    0.28    3.81
FlowSolve:  Result Norm     :    171.590506087100
FlowSolve:  Relative Change :   8.172327617485198E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   2.800000000036107E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1650E-04
       2 0.4502E-05
       3 0.1456E-05
       4 0.4368E-06
       4 0.4368E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   7.189999999894781E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  829.02460     0.14222931E-04 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.097000000001458E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.490000000141436E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    829.024597091430
FreeSurfaceSolver (zs):  Relative Change :   1.422293100261741E-005
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167682E+04/ 0.117121E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.9264E-07
       1 0.9264E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   4.550000000023147E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  829.02461     0.10895217E-07 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   8.840000000134296E-004
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.930000000025302E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    829.024606123833
FreeSurfaceSolver (zs):  Relative Change :   1.089521653217740E-008
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167682E+04/ 0.117121E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3892E-04
       2 0.4867E-05
       3 0.7299E-06
       3 0.7299E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  258.09038     0.22008842E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    258.090376949445
FreeSurfaceSolver (zb):  Relative Change :   2.200884166069307E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 9
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1047E-06
       1 0.1047E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  258.09038     0.72057955E-08 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    258.090378809192
FreeSurfaceSolver (zb):  Relative Change :   7.205795470605170E-009
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 10
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: result output
ResultOutputSolver: -------------------------------------
ResultOutputSolve: Number of output meshes: 1
ResultOutputSolver: Working on mesh: Mesh
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
VtuOutputSolver: Full filename base is: ./Mesh/Forward5KM10L
VtuOutputSolver: Number of active elements 326 out of 326
VtuOutputSolver: Number of geometry nodes 340 out of 340
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the pvtu file: ./Mesh/Forward5KM10L0009.pvtu
WritePvtuFile: Number of active partitions is 20 (out of 20)
WritePvtuFile: List of active partitions was composed
VtuOutputSolver: Finished writing pvtu file
VtuOutputSolver: Writing the vtu file: ./Mesh/Forward5KM10L0001par0009.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
AscBinWriteInit: Writing in binary
AscBinWriteInit: Writing in double precision
AscBinWriteInit: Writing to unit number: 58
AscBinWriteInit: Size of buffer is: 340
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Number of nodal fields written: 19
VtuOutputSolver: Writing elemental fields
VtuOutputSolver: Number of elemental fields written: 0
VtuOutputSolver: Writing entity IDs for bodies and boundaries
VtuOutputSolver: Writing coordinates for each used node
VtuOutputSolver: Writing the elemental connectivity data
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Writing elemental fields
AscBinWriteInit: Terminating buffered ascii/binary writing
VtuOutputSolver: Finished writing vtu file
VtuOutputSolver: All done for now
ResultOutputSolver: -------------------------------------
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 18/20   9.01000000000000
MAIN: Estimated time left: 15.2 seconds
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   1.999999999213742E-005
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  172.01796     0.24880549E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.27    0.27
FlowSolve:  Result Norm     :    172.017964449124
FlowSolve:  Relative Change :   2.488054857075148E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  172.25228     0.13612061E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.27    0.54
FlowSolve:  Result Norm     :    172.252275832370
FlowSolve:  Relative Change :   1.361206144648695E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  172.40302     0.87475861E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.28    0.82
FlowSolve:  Result Norm     :    172.403020927320
FlowSolve:  Relative Change :   8.747586145762721E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  172.50221     0.57517040E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.27
FlowSolve: iter:    4 Solve:    (s)    0.28    1.09
FlowSolve:  Result Norm     :    172.502210566680
FlowSolve:  Relative Change :   5.751703964029920E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  172.56740     0.37781072E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.28    1.37
FlowSolve:  Result Norm     :    172.567396065057
FlowSolve:  Relative Change :   3.778107206441358E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  172.61007     0.24726061E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.28    1.65
FlowSolve:  Result Norm     :    172.610070460110
FlowSolve:  Relative Change :   2.472606076107047E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  172.63792     0.16134082E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.46
FlowSolve: iter:    7 Solve:    (s)    0.27    1.92
FlowSolve:  Result Norm     :    172.637921757566
FlowSolve:  Relative Change :   1.613408221583795E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  172.65606     0.10506957E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.19
FlowSolve:  Result Norm     :    172.656061702006
FlowSolve:  Relative Change :   1.050695656965611E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  172.66786     0.68345987E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.60
FlowSolve: iter:    9 Solve:    (s)    0.27    2.46
FlowSolve:  Result Norm     :    172.667862454201
FlowSolve:  Relative Change :   6.834598688078419E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  172.67554     0.44435069E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.66
FlowSolve: iter:   10 Solve:    (s)    0.28    2.74
FlowSolve:  Result Norm     :    172.675535132980
FlowSolve:  Relative Change :   4.443506858669498E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  172.68052     0.28888016E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.27    3.01
FlowSolve:  Result Norm     :    172.680523458735
FlowSolve:  Relative Change :   2.888801647447667E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  172.68377     0.18786178E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.80
FlowSolve: iter:   12 Solve:    (s)    0.27    3.28
FlowSolve:  Result Norm     :    172.683767496267
FlowSolve:  Relative Change :   1.878617805696030E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  172.68588     0.12223401E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.86
FlowSolve: iter:   13 Solve:    (s)    0.27    3.55
FlowSolve:  Result Norm     :    172.685878292019
FlowSolve:  Relative Change :   1.222340050356292E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  172.68725     0.79587822E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.93
FlowSolve: iter:   14 Solve:    (s)    0.28    3.83
FlowSolve:  Result Norm     :    172.687252666780
FlowSolve:  Relative Change :   7.958782186822010E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   2.899999999783631E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1584E-04
       2 0.3865E-05
       3 0.1594E-05
       4 0.3716E-06
       4 0.3716E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   7.429999999999382E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  829.03667     0.14547441E-04 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.114000000001170E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.339999999951715E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    829.036666397948
FreeSurfaceSolver (zs):  Relative Change :   1.454744081550103E-005
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167624E+04/ 0.117144E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.7856E-07
       1 0.7856E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   4.399999999975535E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  829.03667     0.86307659E-08 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   8.150000000028967E-004
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.750000000053433E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    829.036673553169
FreeSurfaceSolver (zs):  Relative Change :   8.630765870617222E-009
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167624E+04/ 0.117144E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3892E-04
       2 0.4876E-05
       3 0.7218E-06
       3 0.7218E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  258.14741     0.22095985E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    258.147412720537
FreeSurfaceSolver (zb):  Relative Change :   2.209598455637343E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 9
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1042E-06
       1 0.1042E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  258.14741     0.57703206E-08 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    258.147414210130
FreeSurfaceSolver (zb):  Relative Change :   5.770320571743940E-009
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 8
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 19/20   9.51000000000000
MAIN: Estimated time left: 10.1 seconds
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   0.000000000000000E+000
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  173.08931     0.23255494E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.27    0.27
FlowSolve:  Result Norm     :    173.089312910353
FlowSolve:  Relative Change :   2.325549407329059E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  173.31142     0.12823954E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.27    0.54
FlowSolve:  Result Norm     :    173.311424273628
FlowSolve:  Relative Change :   1.282395442229233E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  173.45498     0.82794494E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.81
FlowSolve:  Result Norm     :    173.454976016124
FlowSolve:  Relative Change :   8.279449357033310E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  173.54979     0.54647574E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.27
FlowSolve: iter:    4 Solve:    (s)    0.27    1.08
FlowSolve:  Result Norm     :    173.549790860346
FlowSolve:  Relative Change :   5.464757448475917E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  173.61231     0.36016847E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.35
FlowSolve:  Result Norm     :    173.612309281115
FlowSolve:  Relative Change :   3.601684673732233E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  173.65336     0.23642828E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.27    1.62
FlowSolve:  Result Norm     :    173.653360993784
FlowSolve:  Relative Change :   2.364282806081262E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  173.68023     0.15470013E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.47
FlowSolve: iter:    7 Solve:    (s)    0.27    1.89
FlowSolve:  Result Norm     :    173.680227269336
FlowSolve:  Relative Change :   1.547001295576253E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  173.69777     0.10100269E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.17
FlowSolve:  Result Norm     :    173.697770325067
FlowSolve:  Relative Change :   1.010026878684245E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  173.70921     0.65856887E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.60
FlowSolve: iter:    9 Solve:    (s)    0.27    2.44
FlowSolve:  Result Norm     :    173.709209896196
FlowSolve:  Relative Change :   6.585688705040587E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  173.71666     0.42911699E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.67
FlowSolve: iter:   10 Solve:    (s)    0.27    2.72
FlowSolve:  Result Norm     :    173.716664213479
FlowSolve:  Relative Change :   4.291169909325964E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  173.72152     0.27955676E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.27    2.99
FlowSolve:  Result Norm     :    173.721520648200
FlowSolve:  Relative Change :   2.795567632942877E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  173.72469     0.18215239E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.80
FlowSolve: iter:   12 Solve:    (s)    0.27    3.26
FlowSolve:  Result Norm     :    173.724685056107
FlowSolve:  Relative Change :   1.821523939761654E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  173.72675     0.11873371E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.86
FlowSolve: iter:   13 Solve:    (s)    0.27    3.54
FlowSolve:  Result Norm     :    173.726747766043
FlowSolve:  Relative Change :   1.187337130340635E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  173.72809     0.77439231E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.93
FlowSolve: iter:   14 Solve:    (s)    0.27    3.80
FlowSolve:  Result Norm     :    173.728093097825
FlowSolve:  Relative Change :   7.743923091044268E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   3.100000000699765E-005
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1524E-04
       2 0.3469E-05
       3 0.1824E-05
       4 0.3248E-06
       4 0.3248E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   7.769999999993615E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  829.04896     0.14825328E-04 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.223999999993453E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.519999999923584E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    829.048964385039
FreeSurfaceSolver (zs):  Relative Change :   1.482532818343398E-005
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167568E+04/ 0.117167E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.6822E-07
       1 0.6822E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   4.850000000118371E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  829.04897     0.69225434E-08 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   8.750000000077307E-004
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.899999999958936E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    829.048970124166
FreeSurfaceSolver (zs):  Relative Change :   6.922543403554490E-009
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167568E+04/ 0.117166E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3892E-04
       2 0.4882E-05
       3 0.7124E-06
       3 0.7124E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  258.20465     0.22170660E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    258.204653542090
FreeSurfaceSolver (zb):  Relative Change :   2.217066049859442E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 4
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1014E-06
       1 0.1014E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  258.20465     0.41406939E-08 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    258.204654611236
FreeSurfaceSolver (zb):  Relative Change :   4.140693897278049E-009
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 7
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: result output
ResultOutputSolver: -------------------------------------
ResultOutputSolve: Number of output meshes: 1
ResultOutputSolver: Working on mesh: Mesh
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
VtuOutputSolver: Full filename base is: ./Mesh/Forward5KM10L
VtuOutputSolver: Number of active elements 326 out of 326
VtuOutputSolver: Number of geometry nodes 340 out of 340
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the pvtu file: ./Mesh/Forward5KM10L0010.pvtu
WritePvtuFile: Number of active partitions is 20 (out of 20)
WritePvtuFile: List of active partitions was composed
VtuOutputSolver: Finished writing pvtu file
VtuOutputSolver: Writing the vtu file: ./Mesh/Forward5KM10L0001par0010.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
AscBinWriteInit: Writing in binary
AscBinWriteInit: Writing in double precision
AscBinWriteInit: Writing to unit number: 58
AscBinWriteInit: Size of buffer is: 340
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Number of nodal fields written: 19
VtuOutputSolver: Writing elemental fields
VtuOutputSolver: Number of elemental fields written: 0
VtuOutputSolver: Writing entity IDs for bodies and boundaries
VtuOutputSolver: Writing coordinates for each used node
VtuOutputSolver: Writing the elemental connectivity data
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Writing elemental fields
AscBinWriteInit: Terminating buffered ascii/binary writing
VtuOutputSolver: Finished writing vtu file
VtuOutputSolver: All done for now
ResultOutputSolver: -------------------------------------
ListPopNameSpace: No namespace entry to delete
MAIN: 
MAIN: -------------------------------------
MAIN:  Time: 20/20   10.0100000000000
MAIN: Estimated time left:  5.1 seconds
MAIN: -------------------------------------
MAIN: 
SolveEquations: Solvers before timestep
SolveEquations: Solvers in main iteration loop
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1000E+01
StructuredMeshMapper:  Active coordinate mapping time:   2.000000000634827E-005
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normalvector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
SeaPressure: Sea level =     0.0000
GetHydrostaticLoads: End
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  174.10726     0.21801683E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    1 Assembly: (s)    0.07    0.07
FlowSolve: iter:    1 Solve:    (s)    0.27    0.27
FlowSolve:  Result Norm     :    174.107262900804
FlowSolve:  Relative Change :   2.180168268918784E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  174.31833     0.12115710E-02 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    2 Assembly: (s)    0.07    0.13
FlowSolve: iter:    2 Solve:    (s)    0.28    0.54
FlowSolve:  Result Norm     :    174.318334069693
FlowSolve:  Relative Change :   1.211570967945067E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=3) (NRM,RELC): (  174.45532     0.78551363E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    3 Assembly: (s)    0.07    0.20
FlowSolve: iter:    3 Solve:    (s)    0.27    0.82
FlowSolve:  Result Norm     :    174.455317297797
FlowSolve:  Relative Change :   7.855136279208591E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SlidCoef_Contact: FLOW SOLVER HAS SLIGHTLY CONVERGED: look for new basal conditions
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  174.54610     0.52023835E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    4 Assembly: (s)    0.07    0.27
FlowSolve: iter:    4 Solve:    (s)    0.27    1.09
FlowSolve:  Result Norm     :    174.546099257483
FlowSolve:  Relative Change :   5.202383450554229E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=5) (NRM,RELC): (  174.60614     0.34390127E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    5 Assembly: (s)    0.07    0.33
FlowSolve: iter:    5 Solve:    (s)    0.27    1.36
FlowSolve:  Result Norm     :    174.606136206365
FlowSolve:  Relative Change :   3.439012716185733E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=6) (NRM,RELC): (  174.64566     0.22635947E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    6 Assembly: (s)    0.07    0.40
FlowSolve: iter:    6 Solve:    (s)    0.28    1.64
FlowSolve:  Result Norm     :    174.645664431886
FlowSolve:  Relative Change :   2.263594658558025E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=7) (NRM,RELC): (  174.67160     0.14847844E-03 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    7 Assembly: (s)    0.07    0.46
FlowSolve: iter:    7 Solve:    (s)    0.28    1.91
FlowSolve:  Result Norm     :    174.671597473402
FlowSolve:  Relative Change :   1.484784426329617E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=8) (NRM,RELC): (  174.68857     0.97163032E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    8 Assembly: (s)    0.07    0.53
FlowSolve: iter:    8 Solve:    (s)    0.27    2.18
FlowSolve:  Result Norm     :    174.688569919970
FlowSolve:  Relative Change :   9.716303203389938E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=9) (NRM,RELC): (  174.69966     0.63488736E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:    9 Assembly: (s)    0.07    0.60
FlowSolve: iter:    9 Solve:    (s)    0.28    2.46
FlowSolve:  Result Norm     :    174.699661028518
FlowSolve:  Relative Change :   6.348873582975212E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=10) (NRM,RELC): (  174.70690     0.41451518E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   10 Assembly: (s)    0.07    0.66
FlowSolve: iter:   10 Solve:    (s)    0.27    2.73
FlowSolve:  Result Norm     :    174.706902744748
FlowSolve:  Relative Change :   4.145151797589805E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=11) (NRM,RELC): (  174.71163     0.27054965E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   11 Assembly: (s)    0.07    0.73
FlowSolve: iter:   11 Solve:    (s)    0.27    3.00
FlowSolve:  Result Norm     :    174.711629497871
FlowSolve:  Relative Change :   2.705496524599846E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=12) (NRM,RELC): (  174.71471     0.17659360E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   12 Assembly: (s)    0.07    0.80
FlowSolve: iter:   12 Solve:    (s)    0.27    3.27
FlowSolve:  Result Norm     :    174.714714820719
FlowSolve:  Relative Change :   1.765936025106170E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=13) (NRM,RELC): (  174.71673     0.11530029E-04 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   13 Assembly: (s)    0.07    0.86
FlowSolve: iter:   13 Solve:    (s)    0.27    3.54
FlowSolve:  Result Norm     :    174.716729297999
FlowSolve:  Relative Change :   1.153002864472322E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
GetNOFActive: Number of active elements: 171
DefaultFinishBulkAssembly: Saving bulk values for: navier-stokes
FlowSolve: Assembly done
SetDirichletBoundaries: Number of dofs set: 0
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 1
DefUtils::DefaultDirichletBCs: p-element preparations: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 1
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 222
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 1
SetNodalLoads: Checking for nodal loads for variable: velocity 2
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 898
DefUtils::DefaultDirichletBCs: p-element condition setup: velocity 2
SetNodalLoads: Checking for nodal loads for variable: velocity 3
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
SetNodalLoads: Checking for nodal loads for variable: pressure
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FlowSolve: Dirichlet conditions done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: direct
DirectSolver: Using direct method: mumps
BackScaleLinearSystem: Scaling back to original scale
SolveLinearSystem: Calculating nodal loads
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=14) (NRM,RELC): (  174.71805     0.75317220E-05 ) :: navier-stokes
SolveSystem: System solved
SolveSystem: Finished solving the system
FlowSolve: iter:   14 Assembly: (s)    0.07    0.93
FlowSolve: iter:   14 Solve:    (s)    0.27    3.81
FlowSolve:  Result Norm     :    174.718045220788
FlowSolve:  Relative Change :   7.531721997304969E-006
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:   0.000000000000000E+000
StructuredProjectToPlane: ------------------------------------------
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: solvedistance
DistanceSolver1: -------------------------------------------
DistanceSolver1: Using geometric distance solver
DistanceSolver1: -------------------------------------------
DistanceSolver1: Working with mesh: Mesh
DistanceSolver1: Solving for variable: distance
DistanceSolver1: Elapsed REAL time:     0.0008 (s)
DistanceSolver1: All done
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface top
FreeSurfaceSolver (zs): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zs): Using Dirichlet method for limitation
FreeSurfaceSolver (zs): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zs): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zs): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zs): Mesh dimension: 3
FreeSurfaceSolver (zs): Memory allocations done
FreeSurfaceSolver (zs): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1469E-04
       2 0.3196E-05
       3 0.2149E-05
       4 0.2903E-06
       4 0.2903E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   7.639999999895508E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  829.06146     0.15062861E-04 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   1.193999999998141E-003
Dirichlet:  Additional time spent in DirichletReduction (CPU):   4.300000000085902E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    829.061458067222
FreeSurfaceSolver (zs):  Relative Change :   1.506286052248447E-005
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167514E+04/ 0.117189E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zs): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
SetNodalLoads: Checking for nodal loads for variable: zs
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 0
EnforceDirichletConditions: No Dirichlet conditions to enforce, exiting!
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zs): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Calling procedure before solving system
Dirichlet:  Eliminated 0 unknowns out of 34
ListToCRSMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 103
ListToCRSMatrix: Matrix format changed from List to CRS
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Allocated LU matrix of size: 103
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.6047E-07
       1 0.6047E-07
BackScaleLinearSystem: Scaling back to original scale
ComputeChange: Skipping the computation of nonlinear change
Dirichlet:  Time used in SolveLinearSystem (CPU):   5.230000000011614E-004
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=4) (NRM,RELC): (  829.06146     0.58216591E-08 ) :: free surface top
Dirichlet:  Total time spent in DirichletReduction (CPU):   8.559999999988577E-004
Dirichlet:  Additional time spent in DirichletReduction (CPU):   3.329999999976962E-004
Dirichlet: 
SolveSystem: Finished solving the system
FreeSurfaceSolver (zs):  Result Norm   :    829.061462893735
FreeSurfaceSolver (zs):  Relative Change :   5.821659094001090E-009
FreeSurfaceSolver (zs): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zs):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zs): Max/min values surface: 0.167514E+04/ 0.117189E+04
FreeSurfaceSolver (zs): Number of surface nodes: 34
FreeSurfaceSolver (zs): Number of constrained points (lower limit): 0
FreeSurfaceSolver (zs): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zs): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: free surface sea/shelf
FreeSurfaceSolver (zb): Velocity implicity (1=fully implicit)=     1.00
FreeSurfaceSolver (zb): Using Dirichlet method for limitation
FreeSurfaceSolver (zb): Using horizontal Eulerian Formulation
FreeSurfaceSolver (zb): Using residual squared-stabilized formulation.
FreeSurfaceSolver (zb): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (zb): Mesh dimension: 3
FreeSurfaceSolver (zb): Memory allocations done
FreeSurfaceSolver (zb): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.3890E-04
       2 0.4885E-05
       3 0.7013E-06
       3 0.7013E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=1) (NRM,RELC): (  258.26207     0.22234176E-03 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    258.262070672738
FreeSurfaceSolver (zb):  Relative Change :   2.223417644977646E-004
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 11
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (zb): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
DefUtils::DefaultDirichletBCs: p-element preparations: zb
SetNodalLoads: Checking for nodal loads for variable: zb
SetNodalLoads: Finished checking for nodal loads
SetDirichletBoundaries: Number of dofs set: 152
DefUtils::DefaultDirichletBCs: p-element condition setup: zb
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
EnforceDirichletConditions: Dirichlet boundary conditions enforced
DefUtils::DefaultDirichletBCs: Dirichlet boundary conditions set
FreeSurfaceSolver (zb): Assembly done
DefaultSolve: Solving linear system with default routines
GenerateConstraintMatrix: Nothing to do for now
DefaultSolve: Calling SolveSystem for linear solution
SolveSystem: Solving linear system
SolveSystem: Solving linear system without constraint matrix
SolveLinearSystem: Assuming real valued linear system
ScaleLinearSystem: Scaling diagonal entries to unity
ScaleLinearSystem: Computing > DiagScaling < vector
ScaleLinearSystem: Assuming real valued matrix while scaling
ScaleLinearSystem: Scaling matrix values
ScaleLinearSystem: Scaling Rhs vector
SolveSystem: Linear System Solver: iterative
SolveSystem: Linear System Preconditioning: ilu0
IterSolver: Using iterative method: bicgstab
IterSolver: Matrix is real valued
CRS_IncompleteLU: ILU(0) (Real), Starting Factorization:
CRS_IncompleteLU: Performing incomplete LU
CRS_IncompleteLU: ILU(0) (Real), NOF nonzeros:       104
CRS_IncompleteLU: ILU(0) (Real), filling (%) :       100
CRS_IncompleteLU: ILU(0) (Real), Factorization ready at (s):     0.00
IterSolver: Calling real valued iterative solver
       1 0.1013E-06
       1 0.1013E-06
BackScaleLinearSystem: Scaling back to original scale
ComputeNorm: Computing norm of solution
ComputeNorm: Using consistent norm in parallel
ComputeChange: NS (ITER=2) (NRM,RELC): (  258.26207     0.22219423E-08 ) :: free surface sea/shelf
UpdateExportedVariables: Updating variables, if any!
UpdateExportedVariables: Trying to set values for variable: zb residual
UpdateExportedVariables: Setting values for variable: zb residual
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Trying to set values for variable: zb accumulation
UpdateExportedVariables: Setting values for variable: zb accumulation
UpdateExportedVariables: Updating field variable with dofs: 1
UpdateExportedVariables: Found a proper definition in body forces
SolveSystem: System solved
SolveSystem: Finished solving the system
FreeSurfaceSolver (zb):  Result Norm   :    258.262071246581
FreeSurfaceSolver (zb):  Relative Change :   2.221942255068915E-009
FreeSurfaceSolver (zb): Assembly: (s)    0.00    0.00
FreeSurfaceSolver (zb):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (zb): Max/min values surface:-0.249492E+03/-0.311772E+03
FreeSurfaceSolver (zb): Number of surface nodes: 34
FreeSurfaceSolver (zb): Number of constrained points (lower limit): 10
FreeSurfaceSolver (zb): Number of constrained points (upper limit): 0
FreeSurfaceSolver (zb): Converged after2 iterations
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Bedrock Variable name found
GroundedSolver: Done
ListPopNameSpace: No namespace entry to delete
SolveEquations: Solvers after timestep
ListPopNameSpace: No namespace entry to delete
ListPopNameSpace: No namespace entry to delete
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: result output
ResultOutputSolver: -------------------------------------
ResultOutputSolve: Number of output meshes: 1
ResultOutputSolver: Working on mesh: Mesh
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
VtuOutputSolver: Full filename base is: ./Mesh/Forward5KM10L
VtuOutputSolver: Number of active elements 326 out of 326
VtuOutputSolver: Number of geometry nodes 340 out of 340
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the pvtu file: ./Mesh/Forward5KM10L0011.pvtu
WritePvtuFile: Number of active partitions is 20 (out of 20)
WritePvtuFile: List of active partitions was composed
VtuOutputSolver: Finished writing pvtu file
VtuOutputSolver: Writing the vtu file: ./Mesh/Forward5KM10L0001par0011.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
AscBinWriteInit: Writing in binary
AscBinWriteInit: Writing in double precision
AscBinWriteInit: Writing to unit number: 58
AscBinWriteInit: Size of buffer is: 340
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       -10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       -15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000       -5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        5000.00000001000     
 Grounding Line, (x,y)   1054000.00000000       9.094955215040001E-013
 Grounding Line, (x,y)   1054000.00000000        20000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        15000.0000000000     
 Grounding Line, (x,y)   1054000.00000000        10000.0000000000     
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Number of nodal fields written: 19
VtuOutputSolver: Writing elemental fields
VtuOutputSolver: Number of elemental fields written: 0
VtuOutputSolver: Writing entity IDs for bodies and boundaries
VtuOutputSolver: Writing coordinates for each used node
VtuOutputSolver: Writing the elemental connectivity data
VtuOutputSolver: Writing nodal fields
VtuOutputSolver: Saving variable: pressure
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ceq residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: dsdt
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: ds
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bedrock
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: distance
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zs residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb residual
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: zb accumulation
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: groundedmask
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: depth
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: height
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: bottom zb
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: normal vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: fwater
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: velocity
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Saving variable: stress vector
WriteVTUFile: Setting field type to nodal
VtuOutputSolver: Writing elemental fields
AscBinWriteInit: Terminating buffered ascii/binary writing
VtuOutputSolver: Finished writing vtu file
VtuOutputSolver: All done for now
ResultOutputSolver: -------------------------------------
ReloadInputFile: Realoading input file
LoadInputFile: Loading input file:
ElmerSolver: *** Elmer Solver: ALL DONE ***
FreeModel: Freeing meshes
ReleaseMesh: Releasing mesh variables
ReleaseMesh: Releasing mesh nodes
ReleaseMesh: Releasing mesh elements
ReleaseMesh: Releasing mesh finished
FreeModel: Freeing constants list
FreeModel: Freeing simulation list
FreeModel: Freeing boundary lists
FreeModel: Freeing solvers
FreeModel: Solver: 1
FreeSolver: Free solver matrix
FreeSolver: Free solver miscallenous
FreeModel: Solver: 2
FreeSolver: Free solver matrix
FreeSolver: Free solver miscallenous
FreeModel: Solver: 3
FreeSolver: Free solver matrix
FreeSolver: Free solver miscallenous
FreeModel: Solver: 4
FreeSolver: Free solver matrix
FreeSolver: Free solver miscallenous
FreeModel: Solver: 5
FreeSolver: Free solver matrix
FreeSolver: Free solver miscallenous
FreeModel: Solver: 6
FreeSolver: Free solver matrix
FreeSolver: Free solver miscallenous
FreeModel: Solver: 7
FreeSolver: Free solver matrix
FreeSolver: Free solver miscallenous
FreeModel: Solver: 8
FreeSolver: Free solver matrix
FreeSolver: Free solver miscallenous
FreeModel: Solver: 9
FreeSolver: Free solver matrix
FreeSolver: Free solver miscallenous
FreeModel: Solver: 10
FreeSolver: Free solver matrix
FreeSolver: Free solver miscallenous
FreeModel: Freeing initial conditions lists
FreeModel: Freeing body lists
FreeModel: Freeing equations lists
FreeModel: Freeing body forces lists
ElmerSolver: The end
SOLVER TOTAL TIME(CPU,REAL):        93.79      100.23
ELMER SOLVER FINISHED AT: 2018/07/04 14:03:35
