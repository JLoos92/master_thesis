# -*- coding: utf-8 -*-
"""
Created on Wed Dec 12 15:55:13 2018
"""


from main import ModelRun
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from matplotlib.patches import Polygon
from scipy.interpolate import griddata
import pandas as pd
from __plot_params import params_horizontal
from scipy.interpolate import interp1d



    

def profile_derivative_2d(t1 = None,
                        t2 = None,
                        width = None,
                        prop = None,
                        x_prof= None):
                

    
    
    
        # Choose default timesteps if timesteps are not given
    if (t1,t2) is None:
            t1 = 50
            t2 = 100
     
    if prop is None:
        prop=0
    
    if x_prof is None:
        x_prof = 7
         
                    
   
    original_halfwidth = int(round(np.sqrt(width)*2))
    original_width = original_halfwidth
    
    print(original_width)
    nums = ["(a)","(b)","(c)","(d)"]
    times = [t1, t2]
    


    nrow = 2; ncol = 1;
    fig, ax1 = plt.subplots(nrows=nrow, ncols=ncol,sharey = True, squeeze = False, constrained_layout=True)
    
    # Make space for title
    #fig.subplots_adjust(top=0.8)
    
    
    
     # Custom params load from __plot_params
    plt.rcParams.update(params_horizontal) 
    
    
    for ax,num,t in zip(ax1.reshape(-1),nums,times): 
        
        
            mr = ModelRun(150,width,0,prop,t,"2")
            ht = mr.compute_hydrostatic_thickness()
            sxy = mr.sxy
            upper=ht[2]
            lower=ht[3]
            
            scalar_real = mr.get_scalar_real(' sxy')
            
            x_mat = scalar_real[0]
            y_mat = scalar_real[1]
            scalar_mat = scalar_real[2]
            
            
            # Calculated hydrostatic thickness
            calc_thickness_bs = ht[1]
              
            points = ht[4]
            x = points[:,0]
            y = points[:,1]
            
            

            plt.setp(ax.get_xticklabels(),fontweight = 'bold')
            plt.setp(ax.get_yticklabels(),fontweight = 'bold')
      
            ax.plot(x_mat[x_prof,:],scalar_mat[x_prof,:],'k-',linewidth=1.5)
            
            ax.axvline(0,linestyle='--',linewidth=0.6,color='red')
            ax.axhline(0,linestyle='--',linewidth=0.6,color='red')
            ax.tick_params(direction='in',length=4,width=2)
            ax.set_xlim(-2500,2500)
            #ax.set_ylim(-0.005,0.005)
            ax.set_ylabel('Bridging $\sigma_{xy}$ [$MPa$]', visible = True)
            
                
             # compute deviation regular
            upper=ht[2]
            lower=ht[3]
            points=ht[4]
            x_line = ht[0]
            lower = ht[3]
            calc_thickness_bs = ht[1]
    
    
            
            hydrostatic_deviation = calc_thickness_bs - lower
            
            # place text box in upper left in axes coords      
            props = dict(boxstyle='round', facecolor='wheat')
            
            
            
            axs = ax.twinx()
            axs.tick_params(direction='in',length=4,width=2)
            
              #legend_ax2 = ax.legend(['Modelled thickness','Hydrostatic thickness'],loc="upper right", prop=dict(weight='bold'))
            legend_ax2 = ax.legend(['Bridging profile: \n along x-axis @ y =  ' + str(int(np.mean(y_mat[x_prof,:]))) + ' m'],loc="upper right", prop=dict(weight='bold'))
            frame_ax2 = legend_ax2.get_frame()
            frame_ax2.set_facecolor('0.7')
            frame_ax2.set_edgecolor('0.7')
            
            
            
            axs.set_yticks([-30,-10,0,10,30])
            axs.set_ylim(-40,40)
            axs.set_xticklabels([])
            plt.setp(axs.get_yticklabels(),fontweight = 'bold',color='g')
            axs.plot(x_line, hydrostatic_deviation, 'g',linewidth=1.5)
            axs.set_ylabel('Hydrostatic dev. [m]',visible = True, color= 'g')
    
    
            title = str('Bridging profile vs. dev. of hydrostatic eq.')
            
            
            ax.text(0.02, 0.95, num + '  t = ' + str(t*5) + 'a', transform=ax.transAxes, fontsize=8,
                verticalalignment='top', bbox=props,weight='bold')
            fig.add_subplot(ax)
            
            
    ax1[1][0].set_xlabel(' Domain length in x-direction [m]') 
    
    
    
    axs.axes.get_xaxis().set_visible(True)
    ax1[1][0].set_xticks([-1500,-1000,0,1000,1500])
    ax1[1][0].set_xticklabels([-1500,-1000,0,1000,1500])

    
    
    fig.suptitle(title + ' @ cw = ' + str(original_width*2) + 'm', weight='bold', fontsize = 9.5)
    
    
   
    # Save figures    
    path = str('plots/Final_plots/')
       
    fname_png = str('profile_bridging_dev_2d_' + str(original_width*2) + '.png')
    fname_pdf = str('profile_bridging_dev_2d_' + str(original_width*2) + '.pdf')

    
    plt.savefig(path + fname_png, format = 'png',dpi=1000)
    plt.savefig(path + fname_pdf, format = 'pdf',dpi=1000)       
        
    plt.show()    